options
{
  JDK_VERSION = "1.7";
  static = false;
}

PARSER_BEGIN(PlannerParser)
package org.spiderplan.representation.parser.planner;

import java.util.ArrayList;

import org.spiderplan.representation.*;
import org.spiderplan.representation.types.*;
import org.spiderplan.representation.logic.*;
import org.spiderplan.modules.configuration.ConfigurationManager;

public class PlannerParser 
{
	static ConfigurationManager oM = new ConfigurationManager();
	static public boolean verbose = true;
}

PARSER_END(PlannerParser)
 
/* Skipping comments and white spaces */

SKIP:
{
	<"//" (~["\n"])* "\n">
}

TOKEN_MGR_DECLS:
{
        public static int commentDepth = 0;
}

SKIP:
{
        <"/*"> { commentDepth=1; } : INSIDE_COMMENT
}

<INSIDE_COMMENT>
SKIP:
{
        <"/*"> { commentDepth++; }
}

<INSIDE_COMMENT>
SKIP:
{
        <"*/"> { commentDepth--; if ( commentDepth==0 ) SwitchTo(DEFAULT); }
|       <~[]>
}
SKIP:
{
        <" ">
| 		<"\r">
|       <"\t">
|       <"\n">
}



/* MAIN STRUCTURES */

TOKEN :
{
   < OPTIONS : "Options" >
}

/* SEPARATORS */

TOKEN :
{
  < OPARENTHESIS: "(" >
| < CPARENTHESIS: ")" >
| < OBRACKET: "[" >
| < CBRACKET: "]" >
| < OBRACE: "{" >
| < CBRACE: "}" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":">
| < SEMICOLON: ";">
| < SLASH: "/">
| < TO: "->">
| < PLUS: "+">
| < MINUS: "-">
| < TIMES: "*">
| < DIVIDED: "\\">
| < QMARKS: "\"">
| < EQUALS: "=">
| < NEQUALS: "!=">
| < NEG: "!">
| < LESS: "<">
| < LESSEQ: "<=">
| < GREATER: ">">
| < GREATEREQ: ">=">
| < QPOINT: "?">
| < HASH: "#">
| < DOLLAR: "$" >
}

/* BUILDING BLOCKS */

TOKEN :
{
//   	< PROLOGEXPRESSION : (~[])+ ("\.") >
    < INTERVAL : < OBRACKET > < NON_COMPLEX_TERM > < COMMA > <NON_COMPLEX_TERM> < CBRACKET > >
| 	< BOOLEAN : ("true" | "false" ) >
| 	< PACKAGE : < NON_COMPLEX_TERM > (< DOT > < NON_COMPLEX_TERM >)+ >
|   < INTVALUE: (["0"-"9"])+ >
|   < NON_COMPLEX_TERM : (["a"-"z"]|["A"-"Z"]|["0"-"9"])+ >
//|   < NON_COMPLEX_TERM : ( < CONSTANT > | < VARIABLE > ) >
|   < FLOAT : (["0"-"9"])+ < DOT > (["0"-"9"])+ >
|   < STRING : <  QMARKS > (~["\""])* < QMARKS > >
| 	< BRACED_BLOCK : < OBRACE > (~["}"])* < CBRACE > >

}

void CompilationUnit(ConfigurationManager oM)  :
{  
}
{	(
  	{
  	  PlannerParser.oM = oM;
  	}
	Module()
  	)*
}

void Module() :
{
	Token mClass;
	Token mName;
	Token att;
	Token val;
	String valStr;
	if ( verbose )
	{
		System.out.println("[Parser] Module");
	}
}
{
	
		  ( LOOKAHEAD(2)
			(  mClass = < NON_COMPLEX_TERM > | mClass = < PACKAGE > ) mName = < NON_COMPLEX_TERM > < COLON >
			{
				oM.add( mName.image );
				oM.set( mName.image, "class", mClass.image );
			}
			
			(
			  	( LOOKAHEAD (2)
					  	att = < NON_COMPLEX_TERM > < EQUALS >
					  		(
					  		  ( val = < STRING > { valStr = val.image.replace("\"",""); } )
					  		| ( val = < BOOLEAN > {  valStr = val.image; })
					 		| ( val = < INTVALUE > {  valStr = val.image; })
					  		| ( val = < FLOAT > {  valStr = val.image; })
					  		| ( val = < BRACED_BLOCK > { valStr = val.image; }) )
						{
						  //System.out.println("Setting option: " + mName.image + "." + att.image + " <- " + valStr);
						   oM.set( mName.image, att.image, valStr );
						}
						< SEMICOLON >
				)*	// 
			)
		)+		// At least one module
		[
			< OPTIONS > < COLON >
			( LOOKAHEAD (2)
					  	att = < NON_COMPLEX_TERM > < EQUALS >
					  		(
					  		  ( val = < STRING > { valStr = val.image.replace("\"",""); } )
					  		| ( val = < BOOLEAN > {  valStr = val.image; })
					 		| ( val = < INTVALUE > {  valStr = val.image; })
					  		| ( val = < FLOAT > {  valStr = val.image; })
					  		| ( val = < BRACED_BLOCK > { valStr = val.image; }) )
						{
						  // System.out.println("Setting option: " + mName.image + "." + att.image + " <- " + valStr);
						   oM.setOptions( att.image, valStr );
						}
						< SEMICOLON >
				)*
		]
} 
 
