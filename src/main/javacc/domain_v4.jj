options
{
  JDK_VERSION = "1.8";
  static = false;
}

PARSER_BEGIN(DomainParser_v4)
package org.spiderplan.representation.parser.domain_v4;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collection;
import java.util.Scanner;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.charset.*;
import java.io.IOException;
import java.net.URL;

import org.spiderplan.representation.*;
import org.spiderplan.representation.types.*;
import org.spiderplan.representation.expressions.*;
import org.spiderplan.representation.expressions.execution.ros.*;
import org.spiderplan.representation.expressions.execution.database.*;
import org.spiderplan.representation.expressions.execution.sockets.*;
import org.spiderplan.representation.expressions.execution.caresses.*;
import org.spiderplan.representation.expressions.causal.*;
import org.spiderplan.representation.expressions.cost.*;
import org.spiderplan.representation.expressions.optimization.*;
import org.spiderplan.representation.expressions.domain.*;
import org.spiderplan.representation.expressions.execution.*;
import org.spiderplan.representation.expressions.graph.*;
import org.spiderplan.representation.expressions.interaction.*;
import org.spiderplan.representation.expressions.math.*;
import org.spiderplan.representation.expressions.minizinc.*;
import org.spiderplan.representation.expressions.misc.*;
import org.spiderplan.representation.expressions.programs.*;
import org.spiderplan.representation.expressions.prolog.*;
import org.spiderplan.representation.expressions.ontology.*;
import org.spiderplan.representation.expressions.resources.*;
import org.spiderplan.representation.expressions.sampling.*;
import org.spiderplan.representation.expressions.set.*;
import org.spiderplan.representation.expressions.temporal.*;
import org.spiderplan.representation.expressions.configurationPlanning.*;
import org.spiderplan.modules.solvers.Core;
import org.spiderplan.representation.logic.*;
import org.spiderplan.temporal.TemporalNetworkTools;
import org.spiderplan.tools.UniqueID;

public class DomainParser_v4 
{
  	Core c;
  	HashMap<Term,ArrayList<Term>> groupMapping = new HashMap<Term,ArrayList<Term>>(); ;
  	Map<String,String> includeMapping;
		static public String sourceDirectory;
		static public boolean verbose = true;
}

PARSER_END(DomainParser_v4)

/* Skipping comments and white spaces */

SKIP:
{
	<";" (~["\n"])* "\n">
}

SKIP:
{
        <" ">
| 		<"\r">
|       <"\t">
|       <"\n">
}

/* MAIN STRUCTURES */

TOKEN :
{
    < INCLUDE : ":include" >
|   < EXECUTION : ":execution" >
|   < TEMPORAL : ":temporal" >
|   < COST : ":cost" >
|   < OPTIMIZATION : ":optimization" >
|   < MATH : ":math" >
|   < SET : ":set" >
|   < GRAPH : ":graph" >
|   < PROLOG : ":prolog" >
|   < SPARQL: ":sparql" >
|   < DOMAIN : ":domain" >
|   < GOAL : ":goal" >
|   < TASK : ":task" >
|   < OBSERVATION : ":observation" >
|   < FINALLY : ":finally" >
|   < MINIZINC : ":minizinc" >
|   < RESOURCE : ":resource" >
|   < CONDITIONAL : ":conditional" >
|   < IC: ":ic" >
|   < CONDITION : ":condition" >
|   < SAMPLING : ":sampling" >
|   < CONFIGURATIONPLANNING : ":configuration-planning" >
|   < ROS : ":ros" >
|   < DBEXEC : ":database-execution" >
|   < RESOLVER : ":resolver" >
|   < CAPACITY : ":capacity" >
|   < INITIAL : ":initial-context" >
|   < SIMULATE : ":simulate" >
|   < STATEMENT : ":statement" >
| 	< OPERATOR : ":operator" >
| 	< SIGNATURE : ":signature" >
| 	< PRECONDITIONS : ":preconditions" > 
| 	< EFFECTS : ":effects" >
| 	< ASSERTION : ":assertion" >
| 	< CONSTRAINTS : ":constraints" >
|   < ROSPUBLISH : "publish" >
|   < ROSSUBSCRIBE : "subscribe" >
|   < ROSGOAL : "actionlib" >
|   < REUSABLE : "reusable" >
|   < SOCKETS : ":sockets" >
|   < CARESSES : ":caresses" >
|   < ONTOLOGY : ":ontology" >
}

/* SEPARATORS */

TOKEN :
{
  < OP: "(" >	
| < CP: ")" >
| < OBRACKET: "[" >
| < CBRACKET: "]" >
| < OBRACE: "{" >
| < CBRACE: "}" >
| < BAR : "|" >
| < QPOINT: "?">
| < QMARKS: "\"">
}


/* BUILDING BLOCKS */

TOKEN :
{
    < NON_COMPLEX_TERM : (["a"-"z"]|["A"-"Z"]|["0"-"9"]|["_"]|["."]|["+"]|["-"]|["*"]|["/"]|["%"]|["<"]|[">"]|["="])(["a"-"z"]|["A"-"Z"]|["0"-"9"]|["_"]|["."]|["+"]|["-"]|["*"]|["/"]|["%"]|["<"]|[">"]|["="])* >
|   < STRING : <  QMARKS > (~["\""])* < QMARKS > >
}

void CompilationUnit( Core c, Map<String,String> includeMapping ) :
{
  this.includeMapping = includeMapping;
  this.c = c;
}
{	DomainDefinition()  } 

void DomainDefinition() :
{
}
{
	(
		( LOOKAHEAD(2)
			InitialContext()
			| Operator() 
		)
	)+
}

ArrayList<String> List() :
{
	ArrayList<String> l = new ArrayList<String>();
	String t; 
}
{
	< OBRACE >
		(
		  t = NonComplexTerm()
		  {
				l.add(t);
		  }
		)+		
	< CBRACE >
	{
		return l;
	}
}

void InitialContext() :
{
	ConstraintDatabase cDB;
	if ( verbose ) { System.out.println("[Parser] Initial Context"); }
}
{  
	  //(LOOKAHEAD(2) (<OP> <INITIAL> cDB = ConstraintDatabase() <CP>)
	  //| cDB = ConstraintDatabase())
  	//{
		//	c.getContext().add(cDB);
  	//}
  	
  	<OP> <INITIAL> cDB = ConstraintDatabase() <CP>
  	{
			c.getContext().add(cDB);
  	}
}

/**
 * Terms and Terms
 */
String NonComplexTerm() : 
{
	Token part;
	String r = "";
}
{
	part = <NON_COMPLEX_TERM>
	{
		return part.image;
	}
}
 
Term Term() :
{
  	Term result;
  	Term arg;
  	Term[] args;
  	ArrayList<Term> argList = new ArrayList<Term>();
  	String name;
  	Term lowerBound, upperBound;
	String tmpStr = "";
	boolean isVariable = false;
	Double val;
	Token t;
}
{  

 	(  LOOKAHEAD(5)
 	  (
 	    [ <QPOINT> { isVariable = true; } ]  name = NonComplexTerm()
 	    { 
 	          if ( !isVariable )
		    	  result = Term.parse(name);
		      else 
		    	  result = Term.createVariable(name);
 	    } 
	  )
	 |
	  (
 	    t = <STRING>
 	    { 
    	  result = Term.createConstant(t.image);
		  } 
	  )
	 |
	  (
	    <OP >
	    	name = NonComplexTerm()
			(arg = Term()  { argList.add(arg); })*
 		 <CP >
 		 {
 		    args = new Term[argList.size()];
	  	    for ( int i = 0 ; i < argList.size(); i++ )
	  	    {
	  	      args[i] = argList.get(i);
	  	    }
			result = Term.createComplex(name,args);
		 }  
 	   )
 	 |
 	   (
		< OBRACE > 
			( arg = Term()  { argList.add(arg); } )*
		< CBRACE >
		{
 		    args = new Term[argList.size()];
	  	    for ( int i = 0 ; i < argList.size(); i++ )
	  	    {
	  	      args[i] = argList.get(i);
	  	    }
			result = Term.createComplex("list",args);
		 }  
 	   )
 	|
 	  (
		< OBRACKET > lowerBound = Term() upperBound = Term() < CBRACKET >
			{
				result = Term.createComplex("interval", lowerBound, upperBound);
			}
 	   )
 ) 
  { return result; }
}

/**
 *	STATEMENT
 */
Statement Statement() :
{
    Term intervalKey;
    Term v = null;
    Term x;
}
{
	< OP >
	  intervalKey = IntervalTerm()
	   		 x = Term() [ v = Term() ]
	< CP >
	{
		if ( v != null )
	  	{
	  	  	return new Statement( intervalKey, x, v );
	 	} else {
			return new Statement( intervalKey, x, Term.createConstant("true") );
	 	}
	}
}

/**
 * Constraints
 */
ConstraintDatabase ConstraintDatabase() :
{
  Expression c;
  Term programID;
  ConstraintDatabase cDB = new ConstraintDatabase();
  //groupMapping = new HashMap<Term,ArrayList<Term>>();
  Term name;
}
{
	( LOOKAHEAD(2)
	  <OP>
		( LOOKAHEAD(2) 
		  ( < TEMPORAL > 	( LOOKAHEAD(2) c = TemporalConstraint() 		{ cDB.add(c); } )+ )
		| ( < COST > 		( LOOKAHEAD(2) c = CostConstraint() 			{ cDB.add(c); } )+ )
		| ( < OPTIMIZATION > ( LOOKAHEAD(2) c = OptimizationExpression() 			{ cDB.add(c); } )+ )
		| ( < RESOURCE >	( LOOKAHEAD(2) c = ResourceConstraint() 		{ cDB.add(c); } )+ )
		| ( < GRAPH >		( LOOKAHEAD(2) c = GraphConstraint() 			{ cDB.add(c); } )+ )
		| ( < GOAL > 		( LOOKAHEAD(2) c = GoalConstraint() 			{ cDB.add(c); } )+ )
		| ( < TASK > 		( LOOKAHEAD(2) c = TaskConstraint() 			{ cDB.add(c); } )+ )
		| ( < OBSERVATION > 		( LOOKAHEAD(2) c = Observation() 			{ cDB.add(c); } )+ )
		| ( < FINALLY > 	( 			   c = FinallyConstraint() 			{ cDB.add(c); } )  )
		| ( < DOMAIN > 		( LOOKAHEAD(2) c = DomainConstraint() 			{ cDB.add(c); } )+ )
		| ( < SAMPLING > ( LOOKAHEAD(2) c = SamplingConstraint()	{ cDB.add(c); } )+ )
		| ( < CONFIGURATIONPLANNING > ( LOOKAHEAD(2) c = ConfigurationPlanningConstraint()	{ cDB.add(c); } )+ )
		| ( < MATH > 		( LOOKAHEAD(2) c = MathConstraint() 			{ cDB.add(c); } )+ )
		| ( < SET > 		( LOOKAHEAD(2) c = SetConstraint() 				{ cDB.add(c); } )+ )
		| ( (< CONDITIONAL>|<IC>) ( 			   c = ConditionalConstraint() 		{ cDB.add(c); } )  )
		| ( < SIMULATE > 	( 			   c = Simulation() 		{ cDB.add(c); } )  )
		| ( < ROS > 		( 			   c = ROSConstraint() 				{ cDB.add(c); } )+ )
		| ( < DBEXEC > 		( 			   c = DatabaseExecutionExpression() 				{ cDB.add(c); } )+ )
		| ( < SOCKETS > 		( 			   c = SocketExpression() 				{ cDB.add(c); } )+ )
		| ( < CARESSES > 		( 			   c = CaressesExpression() 				{ cDB.add(c); } )+ )
		| ( < INCLUDE > 	( LOOKAHEAD(2) c = IncludeProgram() 			{ cDB.add(c); } )+ )
		| ( < STATEMENT > 	( LOOKAHEAD(2) c = Statement()	 				{ cDB.add(c); } )+ ) 
		| ( < PROLOG >	 programID = Term()  ( LOOKAHEAD(2) c = PrologConstraint(programID) 	{ cDB.add(c); } )+ )
		| ( < ONTOLOGY >	 programID = Term()  ( LOOKAHEAD(2) c = OntologyExpression(programID) 	{ cDB.add(c); } )+ )	
		| ( < SPARQL >	 ( LOOKAHEAD(2) c = SparQLQuery() 	{ cDB.add(c); } )+ )
		| ( < MINIZINC > programID = Term()  ( LOOKAHEAD(2) c = MiniZincInput(programID) 	{ cDB.add(c); } )+ )
		| ( < ASSERTION > ( c = Assertion() 	{ cDB.add(c); } ) )
		)
	  <CP>
	)*
   {
   	  	TemporalNetworkTools.replaceGroupKeys(cDB, groupMapping);
		return cDB;
   }
}

Expression TemporalConstraint() :
{
	Term constraint;
}
{
	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] Temporal Constraint"); }
		String name = constraint.getName().replace("-","").toLowerCase();
	  	if ( name.equals("planninginterval") ) {
	  	  if ( constraint.getNumArgs() == 1 ) {
	  	     return new PlanningInterval(constraint.getArg(0));
 	      } else {
 	         return new PlanningInterval(constraint.getArg(0), constraint.getArg(1));
 	      }
 	    } else if ( name.equals("date-time-reference") ) {
				 ExpressionTypes.TemporalConstraints.assertSupported(constraint, DateTimeReference.class);

						String dateFormatStr = constraint.getArg(0).toString();
						String initialDate = constraint.getArg(1).toString();

						try {
										long d_days = Long.valueOf(constraint.getArg(2).toString()).longValue();
										long d_hours = Long.valueOf(constraint.getArg(3).toString()).longValue();
										long d_minutes = Long.valueOf(constraint.getArg(4).toString()).longValue();
										long d_seconds = Long.valueOf(constraint.getArg(5).toString()).longValue();
										long d_milliseconds = Long.valueOf(constraint.getArg(6).toString()).longValue();
										return new DateTimeReference(dateFormatStr, initialDate, d_days, d_hours, d_minutes, d_seconds, d_milliseconds);
						} catch ( NumberFormatException e ) {
										System.err.println("Last 5 arguments of " +constraint.toString()+ " must be long values. Exiting...");
										e.printStackTrace();
										System.exit(1);
						}
				
				return null;
				
	    } else if ( name.equals("possibleintersection") || name.equals("intersection") ) {
	      ArrayList<Term> terms = new ArrayList<Term>();
          for ( int i = 0 ; i < constraint.getNumArgs() ; i++ )
          {
                            terms.add(constraint.getArg(i));
          }
	      return new PossibleIntersection(terms);
			} else if ( name.equals("distance") ) {
				return new SimpleDistanceConstraint( constraint );
	    } else if ( name.contains("greater") || name.contains("less") ) {
	   	  return new TemporalIntervalQuery( constraint );
	    } else {
	      return new AllenConstraint( constraint );
	    } 
	}
}

Expression PrologConstraint( Term programID ) :
{
	Term constraint;
}
{
		constraint = Term() 
		{
			if ( verbose ) { System.out.println("[Parser] Prolog Constraint"); }
		   	return new PrologConstraint( constraint, programID ); 
		}
}

Expression ConfigurationPlanningConstraint( ) :
{
	Term constraint;
}
{
		constraint = Term() 
		{
			if ( verbose ) { System.out.println("[Parser] Configuration Planning Constraint"); }
		  return new ConfigurationPlanningConstraint( constraint ); 
		}
}

Expression GoalConstraint() :
{
  	Statement g;
}
{
	g = Statement()
	{
		if ( verbose ) { System.out.println("[Parser] Goal Constraint"); }
		return new OpenGoal(g);
	}
}

Expression TaskConstraint() :
{
  	Statement task;
}
{
	task = Statement()
	{
		if ( verbose ) { System.out.println("[Parser] Task Constraint"); }
		return new Task(task);
	}
}

Expression Observation() :
{
  	Statement observation;
}
{
	observation = Statement()
	{
		if ( verbose ) { System.out.println("[Parser] Observation"); }
		return new Observation(observation);
	}
}

Expression MiniZincInput( Term programID ) :
{
	Term constraint;
}
{
	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] MiniZinc Constraint"); }
	   	return new MiniZincInput( constraint, programID ); 
	}
}

Expression SparQLQuery( ) :
{
	List<Term> targetVariables = new ArrayList<Term>();
	Term programID;
	Term modelID;
	Term tmp;
}
{
	<OP> programID = Term() modelID = Term()
	(tmp = Term() { targetVariables.add(tmp); })* <CP>
	{
		if ( verbose ) { System.out.println("[Parser] SparQLQuery"); }
	  return new SparQLQuery( targetVariables, programID, modelID ); 
	}
}

Expression GraphConstraint() :
{
	Term constraint;
}
{
	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] Graph Constraint"); }
	   	return new GraphConstraint( constraint ); 
	}
}

Expression MathConstraint() :
{
	Term constraint;
}
{
	constraint = Term() 
	{
	   	return new MathConstraint( constraint ); 
	}
}

Expression SetConstraint() :
{
	Term constraint;
}
{
	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] Set Constraint"); }
	   	return new SetConstraint( constraint ); 
	}
}

Expression SamplingConstraint() :
{
	Term constraint;
}
{
	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] Probabilistic Constraint"); }
	   	return new SamplingConstraint( constraint ); 
	}
}

Expression FinallyConstraint() :
{
	Term id;
	ConstraintDatabase cDB;
}
{
	id = Term() cDB = ConstraintDatabase()
	{
		if ( verbose ) { System.out.println("[Parser] Finally Constraint"); }
		return new Finally(id, cDB);
	}
}

Expression DomainConstraint():
{
	Term constraint;
}
{
  	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] Domain Constraint"); }
		if ( constraint.getName().equals("enum") ) {
			return new TypeDomainConstraint(constraint);
		} else if ( constraint.getName().equals("float") ) {
			return new TypeDomainConstraint(constraint);
		} else if ( constraint.getName().equals("int") ) {
			return new TypeDomainConstraint(constraint);
		} else if ( constraint.getName().equals("sig") ) {
			Term varSigTerm = constraint.getArg(0);
			Term valSigTerm = null;
			if ( constraint.getNumArgs() > 1 ) {
				valSigTerm = constraint.getArg(1);
			}
            Term[] args = new Term[varSigTerm.getNumArgs()];
            for ( int i = 0 ; i < args.length ; i++ ) {
            	args[i] = varSigTerm.getArg(i);
            }
			Term varSig = Term.createComplex(varSigTerm.getName(),args);
			if ( valSigTerm != null ) {
				return new TypeSignatureConstraint(varSig,valSigTerm);
			} else {
				return new TypeSignatureConstraint(varSig);
			}
				
		} else if ( constraint.getName().equals("new-object") ) {
			return new NewObject(constraint.getArg(0), constraint.getArg(1));
		} else if ( constraint.getName().equals("uncontrollable") ) {
			return new Uncontrollable(constraint);
		} else if ( constraint.getName().equals("in") || constraint.getName().equals("not-in")) {
		  	ArrayList<Term> D = new ArrayList<Term>();
		  	for ( int i = 1 ; i < constraint.getNumArgs() ; i++ ) {
		  	  	Term t = constraint.getArg(i); 
		  	  	if ( t.isComplex() && t.nameEquals(Term.createConstant("list") ) ) {
                    for ( int j = 0 ; j < t.getNumArgs() ; j++  ) {
                       D.add(t.getArg(j));
                    }
				}
		  	}		  	
		  	Term[] dom = new Term[D.size()];
			for ( int i = 0 ; i < D.size() ; i++ ) {
				dom[i] = D.get(i);
			}
			Term list = Term.createComplex("list", dom);
			
			Term a = Term.createComplex(constraint.getName(), constraint.getArg(0), list);
			
			return new DomainMemberConstraint(a);
		} else {
			return new DomainMemberConstraint(constraint);
		}
	}
}
 
Expression ConditionalConstraint()  :
{
  	InteractionConstraint iC;
	ConstraintDatabase tDB;
	Term name;
	if ( verbose ) { System.out.println("[Parser] Interaction Constraint"); }
}
{
	name = Term()
	{
		iC = new InteractionConstraint(name);
	}
	<OP> < CONDITION > 
		tDB = ConstraintDatabase()
		{
			iC.setCondition(tDB);
		}
	<CP>
	(<OP> < RESOLVER > 
		tDB = ConstraintDatabase()
		{
			iC.addResolver(tDB);
		}
	<CP>)*
	{
			return iC;
	}
}

Expression ROSConstraint()  :
{
  	Expression rosCon;
	Term variable;
	Term value;
	Term topic;
	Term msgType;
	
	Term serverID, actionName;
	Term resultMsg = null;
	
	if ( verbose ) { System.out.println("[Parser] ROS Constraint"); }
}
{
	<OP>
	( LOOKAHEAD(2)
		( <ROSPUBLISH> variable = Term() value = Term() topic = Term() msgType = Term() 
			{ rosCon = new ROSConstraint(ExpressionTypes.ROSRelation.Publish,variable,value,topic,msgType); } )
	|	( <ROSSUBSCRIBE> variable = Term() value = Term() topic = Term() msgType = Term() 
			{ rosCon = new ROSConstraint(ExpressionTypes.ROSRelation.Subscribe,variable,value,topic,msgType); } )
	|	( <ROSGOAL> variable = Term() serverID = Term() actionName = Term() msgType = Term() [ LOOKAHEAD(2) resultMsg = Term() ] 
			{ rosCon = new ROSGoal(variable,serverID,actionName,msgType,resultMsg); } )
	)
	<CP>
	{ return rosCon; }
}

Expression DatabaseExecutionExpression()  :
{
  Term name;
	if ( verbose ) { System.out.println("[Parser] Setting Capacity"); }
}
{
 	name = Term() 
	{
		return new DatabaseExecutionExpression(name);
	} 
}

Expression Simulation()  :
{
  	Simulation sC;
  	Term dispatchTime;
	ConstraintDatabase simDB;
	Token type;
	if ( verbose ) { System.out.println("[Parser] Simulation Constraint"); }
}
{
	dispatchTime = Term()
  	simDB = ConstraintDatabase()
	{
		return new Simulation(dispatchTime,simDB);
	}
}

Expression ReusableResourceCapacity()  :
{
  	Term name;
  	String cap;
	if ( verbose ) { System.out.println("[Parser] Setting Capacity"); }
}
{
  	<OP> < REUSABLE > name = Term() cap = NonComplexTerm() <CP>	 
	{
		return new ReusableResourceCapacity(name, Integer.valueOf(cap));
	} 	   
}

Expression IncludeProgram() :	
{
  	Term name;
    String includedProgramID;
		String subStart = null;
		String subEnd = null;
    Token includedProgramFile;
    if ( verbose ) { System.out.println("[Parser] Include Program"); }
}  
{
	LOOKAHEAD(4) (  
		 <OP> name = Term() includedProgramFile = <STRING> [ subStart = <STRING>.image subEnd = <STRING>.image ] <CP>
	 {
	 	try {
	 		String fileName = includedProgramFile.image.substring(1,includedProgramFile.image.length()-1);

			if ( fileName.startsWith("http://") ) {
					Scanner scanner = new Scanner(new URL(fileName).openStream(), "UTF-8");
					String program = scanner.useDelimiter("\\A").next();
					scanner.close();
					if ( subStart == null )
						 return new IncludedProgram(name, fileName, program );
					else
						 return new IncludedProgram(name, fileName, program, subStart, subEnd );
								
			} else {
				if ( fileName.startsWith(".") ) {	
					fileName = sourceDirectory + fileName;
					fileName = fileName.replace("/./", "/");
				}

				String program = new String(Files.readAllBytes(Paths.get(fileName)), StandardCharsets.UTF_8);

				if ( subStart == null )
						 return new IncludedProgram(name, fileName, program );
				else
						 return new IncludedProgram(name, fileName, program, subStart, subEnd );

	 		}
	 	} catch ( IOException e ) {
			e.printStackTrace();
			System.exit(0);
		}
	 }
	) | (

	 <OP> name = Term() includedProgramID = NonComplexTerm() 	<CP>
	{
	    return new IncludedProgram(name, includeMapping.get(includedProgramID) );
	}
	)
}

Expression Assertion() :
{
	ArrayList<Term> parameters = new ArrayList<Term>();
	Term parameter;
	Term expressionType;
	 if ( verbose ) { System.out.println("[Parser] Assertion"); }
}
{
	expressionType = Term() ( LOOKAHEAD(2) parameter = Term() { parameters.add(parameter); } )+
	{
			Term list[] = new Term[parameters.size()];
			for ( int i = 0 ; i < parameters.size() ; i++ ) {
				list[i] = parameters.get(i);
			}
			
	   	return new Assertion( expressionType, list ); 
	}
}

/**
 * Operators
 */
void Operator()  : 
{
    Operator o;
    List<Term> sigTerms = new ArrayList<Term>();
    Term name = null;
    Term arg = null;
    Statement s;
    ConstraintDatabase C;

    if ( verbose ) { System.out.println("[Parser] Operator"); }
}
{
  
 <OP> <OPERATOR> name = Term()
  	{
			o = new Operator();
			o.setName( name );
			//groupMapping = new HashMap<Term,ArrayList<Term>>();
  	}
  [ LOOKAHEAD(2) <OP> <SIGNATURE> 
		{ 
			String opName = name.getName(); 
			int i = 0;
			Term[] args = new Term[name.getNumArgs()];
		} 
			( arg = Term() 
			{ 
				if ( i >= args.length ) { 
					System.err.println("Signature has more arguments than name of operator " + name + ". Exiting..."); 
					System.exit(1); 
				} 
				args[i++] = arg; 
			})* 
		{ 
			if ( i != name.getNumArgs() ) { 
				System.err.println("Signature has less arguments than name of operator " + name + ". Exiting..."); 
				System.exit(1); 
			}
			Term sig = Term.createComplex(opName, args);
			c.getContext().add(new TypeSignatureConstraint(sig)); 
		} 
	<CP> ]
	<OP> < PRECONDITIONS > 	(s = Statement() {   o.addPrecondition(s); 	} )* <CP> 
	<OP> < EFFECTS >      	(s = Statement() {   o.addEffect(s); 		} )* <CP>
  	<OP> < CONSTRAINTS > C = ConstraintDatabase() <CP>
  	{
  	  o.addConstraints(C);
  	  TemporalNetworkTools.replaceGroupKeys(o.getConstraints(), groupMapping);
  	  c.getOperators().add(o);
  	}
  	<CP>
}

Term IntervalTerm() :
{
	String group = "";
	List<Term> groups = new ArrayList<Term>();
	Term keyTerm = null;
	Token keyToken;
	String keyString = null;
}
{
  	( 
  	  [ LOOKAHEAD(2)
  	  	(
  	  		(keyString = NonComplexTerm())
  	  		| 
  	  		(<QPOINT> keyString = NonComplexTerm() {keyString = "?" + keyString;})
  	  	)
    ] ( LOOKAHEAD (2) < BAR > group = NonComplexTerm()
  	{
  	  groups.add(Term.parse(group));
  	} )*
  	{

		if ( keyString == null )
  	    	keyTerm = Term.createConstant("key" + UniqueID.getID());
  	    else
  	    	keyTerm = Term.parse(keyString);
	
		for ( Term groupTerm : groups )
		{
		  	if ( !groupMapping.containsKey(groupTerm) )
		  	{
		  		groupMapping.put(groupTerm, new ArrayList<Term>());
		  	}
		  	groupMapping.get(groupTerm).add(keyTerm);
	   }
	   return keyTerm;
 
  	}
 )
}

Expression ResourceConstraint() :
{
  	Expression c;
}
{
 	( c = ReusableResourceCapacity() ) { return c; }
}

Expression CostConstraint() :
{
  	Term cRel;
}
{
 	( cRel = Term() )  	{ 	return new Cost(cRel); 	}
}

Expression OptimizationExpression() :
{
  	Term cRel;
}
{
 	( cRel = Term() )  	{ 	return new OptimizationTarget(cRel); 	}
}

Expression SocketExpression() :
{
  	Term cRel;
}
{
 	( cRel = Term() )  	{ 	return new SocketExpression(cRel); 	}
}

Expression CaressesExpression() :
{
  	Term cRel;
}
{
 	( cRel = Term() )  	{ 	return new CaressesExpression(cRel); 	}
}

Expression OntologyExpression( Term programID ) :
{
	Term constraint;
}
{
	constraint = Term() 
	{
		if ( verbose ) { System.out.println("[Parser] Ontology Expression"); }
	   	return new OntologyExpression( programID, constraint ); 
	}
}
