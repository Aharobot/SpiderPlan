/* Generated By:JavaCC: Do not edit this line. DomainParser_v4.java */
package org.spiderplan.representation.parser.domain_v4;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collection;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.charset.*;
import java.io.IOException;

import org.spiderplan.representation.*;
import org.spiderplan.representation.types.*;
import org.spiderplan.representation.constraints.*;
import org.spiderplan.representation.constraints.ros.*;
import org.spiderplan.representation.constraints.VariableDomainRestriction.Relation;
import org.spiderplan.modules.solvers.Core;
import org.spiderplan.representation.logic.*;
import org.spiderplan.temporal.TemporalNetworkTools;
import org.spiderplan.tools.UniqueID;

public class DomainParser_v4 implements DomainParser_v4Constants {
        Core c;
        HashMap<Term,ArrayList<Term>> groupMapping;
        Map<String,String> includeMapping;
                static public String sourceDirectory;
                static public boolean verbose = true;

  final public void CompilationUnit(Core c, Map<String,String> includeMapping) throws ParseException {
  this.includeMapping = includeMapping;
  this.c = c;
    DomainDefinition();
  }

  final public void DomainDefinition() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        InitialContext();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          Operator();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public ArrayList<String> List() throws ParseException {
        ArrayList<String> l = new ArrayList<String>();
        String t;
    jj_consume_token(OBRACE);
    label_2:
    while (true) {
      t = NonComplexTerm();
                                l.add(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_COMPLEX_TERM:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(CBRACE);
                {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public void InitialContext() throws ParseException {
        ConstraintDatabase cDB;
        if ( verbose ) { System.out.println("[Parser] Initial Context"); }
    jj_consume_token(OP);
    jj_consume_token(INITIAL);
    cDB = ConstraintDatabase();
    jj_consume_token(CP);
                c.getContext().add(cDB);
  }

/**
 * Terms and Atomics
 */
  final public String NonComplexTerm() throws ParseException {
        Token part;
        String r = "";
    part = jj_consume_token(NON_COMPLEX_TERM);
                {if (true) return part.image;}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
        Term result;
        Term arg;
        Term[] args;
        ArrayList<Term> argList = new ArrayList<Term>();
        String name;
        Term lowerBound, upperBound;
        String tmpStr = "";
        boolean isVariable = false;
        Double val;
        Token t;
    if (jj_2_2(5)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QPOINT:
        jj_consume_token(QPOINT);
                         isVariable = true;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      name = NonComplexTerm();
                  if ( !isVariable )
                          result = Term.parse(name);
                      else
                          result = Term.createVariable(name);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        jj_consume_token(OP);
        name = NonComplexTerm();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
          case OBRACKET:
          case OBRACE:
          case PLUS:
          case MINUS:
          case QPOINT:
          case NON_COMPLEX_TERM:
          case UFLOAT:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          arg = Term();
                                         argList.add(arg);
        }
        jj_consume_token(CP);
                    args = new Term[argList.size()];
                    for ( int i = 0 ; i < argList.size(); i++ )
                    {
                      args[i] = argList.get(i);
                    }
                        result = Term.createComplex(name,args);
        break;
      case OBRACE:
        jj_consume_token(OBRACE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
          case OBRACKET:
          case OBRACE:
          case PLUS:
          case MINUS:
          case QPOINT:
          case NON_COMPLEX_TERM:
          case UFLOAT:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          arg = Term();
                                          argList.add(arg);
        }
        jj_consume_token(CBRACE);
                    args = new Term[argList.size()];
                    for ( int i = 0 ; i < argList.size(); i++ )
                    {
                      args[i] = argList.get(i);
                    }
                        result = Term.createComplex("list",args);
        break;
      case OBRACKET:
        jj_consume_token(OBRACKET);
        lowerBound = Term();
        upperBound = Term();
        jj_consume_token(CBRACKET);
                                result = Term.createComplex("interval", lowerBound, upperBound);
        break;
      case PLUS:
      case MINUS:
      case UFLOAT:
        val = Float();
                result = Term.createFloat(val);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Atomic Atomic() throws ParseException {
    Atomic a;
    String name;
    Term tmpTerm;
    ArrayList<Term> terms = new ArrayList<Term>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      jj_consume_token(OP);
      name = NonComplexTerm();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
        case OBRACKET:
        case OBRACE:
        case PLUS:
        case MINUS:
        case QPOINT:
        case NON_COMPLEX_TERM:
        case UFLOAT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        tmpTerm = Term();
                                terms.add(tmpTerm);
      }
      jj_consume_token(CP);
            Term[] args = new Term[terms.size()];
            for ( int i = 0 ; i < terms.size(); i++ )
            {
              args[i] = terms.get(i);
            }
            {if (true) return new Atomic( name, args );}
      break;
    case NON_COMPLEX_TERM:
      name = NonComplexTerm();
            {if (true) return new Atomic( name );}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Atomic> TypedAtomic() throws ParseException {
    Atomic a;
    Token negated  = new Token();
    String name;
    Term tmpTerm, type;
    ArrayList<Term> sigTerms = new ArrayList<Term>();
    ArrayList<Term> terms = new ArrayList<Term>();
    jj_consume_token(OP);
    name = NonComplexTerm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
      case OBRACKET:
      case OBRACE:
      case PLUS:
      case MINUS:
      case QPOINT:
      case NON_COMPLEX_TERM:
      case UFLOAT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      tmpTerm = Term();
      jj_consume_token(MINUS);
      type = Term();
                terms.add(tmpTerm);
                sigTerms .add(type);
    }
    jj_consume_token(CP);
                Term[] sigArgs = new Term[sigTerms.size()];
            for ( int i = 0 ; i < sigTerms.size(); i++ )
            {
              sigArgs[i] = sigTerms.get(i);
            }

                Atomic sigAtomic = new Atomic( name, sigArgs );

                Term[] args = new Term[terms.size()];
            for ( int i = 0 ; i < terms.size(); i++ )
            {
              args[i] = terms.get(i);
            }
            Atomic atomic = new Atomic( name, args );

            List<Atomic> r = new ArrayList<Atomic>();
            r.add(atomic);
            r.add(sigAtomic);
            {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

/**
 *	STATEMENT
 */
  final public Statement Statement() throws ParseException {
    Term intervalKey;
    Term v = null;
    Atomic x;
    jj_consume_token(OP);
    intervalKey = IntervalTerm();
    x = Atomic();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
    case OBRACKET:
    case OBRACE:
    case PLUS:
    case MINUS:
    case QPOINT:
    case NON_COMPLEX_TERM:
    case UFLOAT:
      v = Term();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(CP);
                if ( v != null )
                {
                        {if (true) return new Statement( intervalKey, x, v );}
                } else {
                        {if (true) return new Statement( intervalKey, x, Term.createConstant("true") );}
                }
    throw new Error("Missing return statement in function");
  }

/**
 * Constraints
 */
  final public ConstraintDatabase ConstraintDatabase() throws ParseException {
  Constraint c;
  Term programID;
  ConstraintDatabase cDB = new ConstraintDatabase();
  groupMapping = new HashMap<Term,ArrayList<Term>>();
  Term name;
    label_7:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(OP);
      if (jj_2_19(2)) {
        jj_consume_token(TEMPORAL);
        label_8:
        while (true) {
          c = TemporalConstraint();
                                                                                                  cDB.add(c);
          if (jj_2_4(2)) {
            ;
          } else {
            break label_8;
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COST:
          jj_consume_token(COST);
          label_9:
          while (true) {
            c = CostConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_5(2)) {
              ;
            } else {
              break label_9;
            }
          }
          break;
        case RESOURCE:
          jj_consume_token(RESOURCE);
          label_10:
          while (true) {
            c = ResourceConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_6(2)) {
              ;
            } else {
              break label_10;
            }
          }
          break;
        case GRAPH:
          jj_consume_token(GRAPH);
          label_11:
          while (true) {
            c = GraphConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_7(2)) {
              ;
            } else {
              break label_11;
            }
          }
          break;
        case GOAL:
          jj_consume_token(GOAL);
          label_12:
          while (true) {
            c = GoalConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_8(2)) {
              ;
            } else {
              break label_12;
            }
          }
          break;
        case TASK:
          jj_consume_token(TASK);
          label_13:
          while (true) {
            c = TaskConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_9(2)) {
              ;
            } else {
              break label_13;
            }
          }
          break;
        case FINALLY:
          jj_consume_token(FINALLY);
          c = FinallyConstraint();
                                                                                                                  cDB.add(c);
          break;
        case DOMAIN:
          jj_consume_token(DOMAIN);
          label_14:
          while (true) {
            c = DomainConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_10(2)) {
              ;
            } else {
              break label_14;
            }
          }
          break;
        case PROBABILISTIC:
          jj_consume_token(PROBABILISTIC);
          label_15:
          while (true) {
            c = ProbabilisticConstraint();
                                                                                          cDB.add(c);
            if (jj_2_11(2)) {
              ;
            } else {
              break label_15;
            }
          }
          break;
        case MATH:
          jj_consume_token(MATH);
          label_16:
          while (true) {
            c = MathConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_12(2)) {
              ;
            } else {
              break label_16;
            }
          }
          break;
        case SET:
          jj_consume_token(SET);
          label_17:
          while (true) {
            c = SetConstraint();
                                                                                                          cDB.add(c);
            if (jj_2_13(2)) {
              ;
            } else {
              break label_17;
            }
          }
          break;
        case CONDITIONAL:
          jj_consume_token(CONDITIONAL);
          c = ConditionalConstraint();
                                                                                                  cDB.add(c);
          break;
        case SIMULATE:
          jj_consume_token(SIMULATE);
          c = SimulationConstraint();
                                                                                                          cDB.add(c);
          break;
        case ROS:
          jj_consume_token(ROS);
          label_18:
          while (true) {
            c = ROSConstraint();
                                                                                                                  cDB.add(c);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OP:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_18;
            }
          }
          break;
        case CUSTOM:
          jj_consume_token(CUSTOM);
          label_19:
          while (true) {
            c = CustomConstraint();
                                                                                                  cDB.add(c);
            if (jj_2_14(2)) {
              ;
            } else {
              break label_19;
            }
          }
          break;
        case INCLUDE:
          jj_consume_token(INCLUDE);
          label_20:
          while (true) {
            c = IncludeProgram();
                                                                                                  cDB.add(c);
            if (jj_2_15(2)) {
              ;
            } else {
              break label_20;
            }
          }
          break;
        case STATEMENT:
          jj_consume_token(STATEMENT);
          label_21:
          while (true) {
            c = Statement();
                                                                                                          cDB.add(c);
            if (jj_2_16(2)) {
              ;
            } else {
              break label_21;
            }
          }
          break;
        case PROLOG:
          jj_consume_token(PROLOG);
          programID = Term();
          label_22:
          while (true) {
            c = PrologConstraint(programID);
                                                                                                          cDB.add(c);
            if (jj_2_17(2)) {
              ;
            } else {
              break label_22;
            }
          }
          break;
        case MINIZINC:
          jj_consume_token(MINIZINC);
          programID = Term();
          label_23:
          while (true) {
            c = MiniZincConstraint(programID);
                                                                                                          cDB.add(c);
            if (jj_2_18(2)) {
              ;
            } else {
              break label_23;
            }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CP);
    }
                TemporalNetworkTools.replaceGroupKeys(cDB, groupMapping);
                {if (true) return cDB;}
    throw new Error("Missing return statement in function");
  }

  final public Constraint TemporalConstraint() throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                if ( verbose ) { System.out.println("[Parser] Temporal Constraint"); }
                String name = constraint.name().replace("-","").toLowerCase();
                if ( name.equals("planninginterval") ) {
                  if ( constraint.getNumArgs() == 1 ) {
                     {if (true) return new PlanningInterval(constraint.getArg(0));}
              } else {
                 {if (true) return new PlanningInterval(constraint.getArg(0), constraint.getArg(1));}
              }
            } else if ( name.equals("possibleintersection") ) {
              ArrayList<Term> terms = new ArrayList<Term>();
          for ( int i = 0 ; i < constraint.getNumArgs() ; i++ )
          {
                            terms.add(constraint.getArg(i));
          }
              {if (true) return new PossibleIntersection(terms);}
            } else if ( name.contains("greater") || name.contains("less") ) {
                  {if (true) return new TemporalIntervalQuery( constraint );}
            } else {
              {if (true) return new AllenConstraint( constraint );}
            }
    throw new Error("Missing return statement in function");
  }

  final public Constraint PrologConstraint(Term programID) throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                        if ( verbose ) { System.out.println("[Parser] Prolog Constraint"); }
                        {if (true) return new PrologConstraint( constraint, programID );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint GoalConstraint() throws ParseException {
        Statement g;
    g = Statement();
                if ( verbose ) { System.out.println("[Parser] Goal Constraint"); }
                {if (true) return new OpenGoal(g);}
    throw new Error("Missing return statement in function");
  }

  final public Constraint TaskConstraint() throws ParseException {
        Statement task;
    task = Statement();
                if ( verbose ) { System.out.println("[Parser] Task Constraint"); }
                {if (true) return new Task(task);}
    throw new Error("Missing return statement in function");
  }

  final public Constraint MiniZincConstraint(Term programID) throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                if ( verbose ) { System.out.println("[Parser] MiniZinc Constraint"); }
                {if (true) return new MiniZincConstraint( constraint, programID );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint GraphConstraint() throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                if ( verbose ) { System.out.println("[Parser] Graph Constraint"); }
                {if (true) return new GraphConstraint( constraint );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint MathConstraint() throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                {if (true) return new MathConstraint( constraint );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint SetConstraint() throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                if ( verbose ) { System.out.println("[Parser] Set Constraint"); }
                {if (true) return new SetConstraint( constraint );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint ProbabilisticConstraint() throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                if ( verbose ) { System.out.println("[Parser] Probabilistic Constraint"); }
                {if (true) return new ProbabilisticConstraint( constraint );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint CustomConstraint() throws ParseException {
        Atomic constraint;
        Token conType;
    conType = jj_consume_token(COLON);
    constraint = Atomic();
                {if (true) return new CustomConstraint( constraint,new Atomic(conType.image) );}
    throw new Error("Missing return statement in function");
  }

  final public Constraint FinallyConstraint() throws ParseException {
        ConstraintDatabase cDB;
    cDB = ConstraintDatabase();
                if ( verbose ) { System.out.println("[Parser] Finally Constraint"); }
                {if (true) return new Finally(cDB);}
    throw new Error("Missing return statement in function");
  }

  final public Constraint DomainConstraint() throws ParseException {
        Atomic constraint;
    constraint = Atomic();
                if ( verbose ) { System.out.println("[Parser] Domain Constraint"); }
                if ( constraint.name().equals("enum") ) {
                        {if (true) return new TypeDomainConstraint(constraint);}
                } else if ( constraint.name().equals("float") ) {
                        {if (true) return new TypeDomainConstraint(constraint);}
                } else if ( constraint.name().equals("int") ) {
                        {if (true) return new TypeDomainConstraint(constraint);}
                } else if ( constraint.name().equals("sig") ) {
                        Term varSigTerm = constraint.getArg(0);
                        Term valSigTerm = null;
                        if ( constraint.getNumArgs() > 1 ) {
                                valSigTerm = constraint.getArg(1);
                        }
            Term[] args = new Term[varSigTerm.getNumArgs()];
            for ( int i = 0 ; i < args.length ; i++ ) {
                args[i] = varSigTerm.getArg(i);
            }
                        Atomic varSig = new Atomic(varSigTerm.getName(),args);
                        if ( valSigTerm != null ) {
                                {if (true) return new TypeSignatureConstraint(varSig,valSigTerm);}
                        } else {
                                {if (true) return new TypeSignatureConstraint(varSig);}
                        }

                } else if ( constraint.name().equals("new-object") ) {
                        {if (true) return new NewObject(constraint.getArg(0), constraint.getArg(1));}
                } else if ( constraint.name().equals("in") || constraint.name().equals("not-in")) {
                        ArrayList<Term> D = new ArrayList<Term>();
                        for ( int i = 1 ; i < constraint.getNumArgs() ; i++ ) {
                                Term t = constraint.getArg(i);
                                if ( t.isComplex() && t.nameEquals(Term.createConstant("list") ) ) {
                    for ( int j = 0 ; j < t.getNumArgs() ; j++  ) {
                       D.add(t.getArg(j));
                    }
                                }
                        }
                        Term[] dom = new Term[D.size()];
                        for ( int i = 0 ; i < D.size() ; i++ ) {
                                dom[i] = D.get(i);
                        }
                        Term list = Term.createComplex("list", dom);

                        Atomic a = new Atomic(constraint.name(), constraint.getArg(0), list);

                        {if (true) return new DomainConstraint(a);}
                } else {
                        {if (true) return new DomainConstraint(constraint);}
                }
    throw new Error("Missing return statement in function");
  }

  final public Constraint ConditionalConstraint() throws ParseException {
        InteractionConstraint iC;
        ConstraintDatabase tDB;
        Atomic name;
        if ( verbose ) { System.out.println("[Parser] Interaction Constraint"); }
    name = Atomic();
                iC = new InteractionConstraint(name);
    jj_consume_token(OP);
    jj_consume_token(CONDITION);
    tDB = ConstraintDatabase();
                        iC.setCondition(tDB);
    jj_consume_token(CP);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_24;
      }
      jj_consume_token(OP);
      jj_consume_token(RESOLVER);
      tDB = ConstraintDatabase();
                        iC.addResolver(tDB);
      jj_consume_token(CP);
    }
                        {if (true) return iC;}
    throw new Error("Missing return statement in function");
  }

  final public Constraint ROSConstraint() throws ParseException {
        Constraint rosCon;
        ConstraintDatabase wrt = null;
        Atomic variable;
        Term value;
        Term topic;
        Term msgType;

        Term serverID, actionName;
        Term resultMsg = null;

        if ( verbose ) { System.out.println("[Parser] Interaction Constraint"); }
    jj_consume_token(OP);
    if (jj_2_21(2)) {
      jj_consume_token(ROSPUBLISH);
      variable = Atomic();
      value = Term();
      topic = Term();
      msgType = Term();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        jj_consume_token(OP);
        jj_consume_token(CONDITION);
        wrt = ConstraintDatabase();
        jj_consume_token(CP);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
                                                                                                                                                          rosCon = new ROSConstraint(ConstraintTypes.ROSRelation.PublishTo,variable,value,topic,msgType,wrt);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROSSUBSCRIBE:
        jj_consume_token(ROSSUBSCRIBE);
        variable = Atomic();
        value = Term();
        topic = Term();
        msgType = Term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          jj_consume_token(OP);
          jj_consume_token(CONDITION);
          wrt = ConstraintDatabase();
          jj_consume_token(CP);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
                                                                                                                                                           rosCon = new ROSConstraint(ConstraintTypes.ROSRelation.SubscribeTo,variable,value,topic,msgType,wrt);
        break;
      case ROSREGACTION:
        jj_consume_token(ROSREGACTION);
        serverID = Term();
        actionName = Term();
                                                                         rosCon = new ROSRegisterAction(serverID,actionName);
        break;
      case ROSGOAL:
        jj_consume_token(ROSGOAL);
        variable = Atomic();
        serverID = Term();
        actionName = Term();
        msgType = Term();
        if (jj_2_20(2)) {
          resultMsg = Term();
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          jj_consume_token(OP);
          jj_consume_token(CONDITION);
          wrt = ConstraintDatabase();
          jj_consume_token(CP);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
                                                                                                                                                                                                  rosCon = new ROSGoal(variable,serverID,actionName,msgType,resultMsg,wrt);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CP);
          {if (true) return rosCon;}
    throw new Error("Missing return statement in function");
  }

  final public Constraint SimulationConstraint() throws ParseException {
        SimulationConstraint sC;
        Term dispatchTime;
        ConstraintDatabase simDB;
        Token type;
        if ( verbose ) { System.out.println("[Parser] Simulation Constraint"); }
    dispatchTime = Term();
    simDB = ConstraintDatabase();
                {if (true) return new SimulationConstraint(dispatchTime,simDB);}
    throw new Error("Missing return statement in function");
  }

  final public Constraint ReusableResourceCapacity() throws ParseException {
        Atomic name;
        String cap;
        if ( verbose ) { System.out.println("[Parser] Setting Capacity"); }
    jj_consume_token(OP);
    jj_consume_token(REUSABLE);
    name = Atomic();
    cap = NonComplexTerm();
    jj_consume_token(CP);
                {if (true) return new ReusableResourceCapacity(name, Integer.valueOf(cap));}
    throw new Error("Missing return statement in function");
  }

  final public Constraint IncludeProgram() throws ParseException {
        Term name;
    String includedProgramID;
    Token includedProgramFile;
    if ( verbose ) { System.out.println("[Parser] Include Program"); }
    if (jj_2_22(4)) {
      jj_consume_token(OP);
      name = Term();
      includedProgramFile = jj_consume_token(STRING);
      jj_consume_token(CP);
                try {
                        String fileName = includedProgramFile.image.substring(1,includedProgramFile.image.length()-1);

                        if ( fileName.startsWith(".") ) {
                                fileName = sourceDirectory + fileName;
                                fileName = fileName.replace("/./", "/");
                        }

                        String program = new String(Files.readAllBytes(Paths.get(fileName)), StandardCharsets.UTF_8);
                        {if (true) return new IncludedProgram(name, program );}
                } catch ( IOException e ) {
                        e.printStackTrace();
                        System.exit(0);
                }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        jj_consume_token(OP);
        name = Term();
        includedProgramID = NonComplexTerm();
        jj_consume_token(CP);
            {if (true) return new IncludedProgram(name, includeMapping.get(includedProgramID) );}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Operators
 */
  final public void Operator() throws ParseException {
    Operator o;
    List<Atomic> nameAndSig = null;
    Atomic name = null;
    Statement s;
    ConstraintDatabase C;
    if ( verbose ) { System.out.println("[Parser] Operator"); }
    jj_consume_token(OP);
    jj_consume_token(OPERATOR);
    if (jj_2_23(8)) {
      nameAndSig = TypedAtomic();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
      case NON_COMPLEX_TERM:
        name = Atomic();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if ( nameAndSig != null ) {
                        name = nameAndSig.get(0);
                        c.getContext().add(new TypeSignatureConstraint(nameAndSig.get(1)));
                }
                o = new Operator();
                o.setName( name );
                groupMapping = new HashMap<Term,ArrayList<Term>>();
    jj_consume_token(OP);
    jj_consume_token(PRECONDITIONS);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_25;
      }
      s = Statement();
                                                     o.addPrecondition(s);
    }
    jj_consume_token(CP);
    jj_consume_token(OP);
    jj_consume_token(EFFECTS);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_26;
      }
      s = Statement();
                                                     o.addEffect(s);
    }
    jj_consume_token(CP);
    jj_consume_token(OP);
    jj_consume_token(CONSTRAINTS);
    C = ConstraintDatabase();
    jj_consume_token(CP);
          o.addConstraints(C);
          TemporalNetworkTools.replaceGroupKeys(o.getConstraints(), groupMapping);
          c.getOperators().add(o);
    jj_consume_token(CP);
  }

  final public Term IntervalTerm() throws ParseException {
        String group = "";
        List<Term> groups = new ArrayList<Term>();
        Term keyTerm = null;
        Token keyToken;
        String keyString = null;
    if (jj_2_24(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_COMPLEX_TERM:
        keyString = NonComplexTerm();
        break;
      case QPOINT:
        jj_consume_token(QPOINT);
        keyString = NonComplexTerm();
                                                                keyString = "?" + keyString;
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    label_27:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(BAR);
      group = NonComplexTerm();
          groups.add(Term.parse(group));
    }
                if ( keyString == null )
                keyTerm = Term.createConstant("key" + UniqueID.getID());
            else
                keyTerm = Term.parse(keyString);

                for ( Term groupTerm : groups )
                {
                        if ( !groupMapping.containsKey(groupTerm) )
                        {
                                groupMapping.put(groupTerm, new ArrayList<Term>());
                        }
                        groupMapping.get(groupTerm).add(keyTerm);
           }
           {if (true) return keyTerm;}
    throw new Error("Missing return statement in function");
  }

  final public Constraint ResourceConstraint() throws ParseException {
        Constraint c;
    c = ReusableResourceCapacity();
                                             {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Constraint CostConstraint() throws ParseException {
        Atomic cRel;
    cRel = Atomic();
                                        {if (true) return new Cost(cRel);}
    throw new Error("Missing return statement in function");
  }

/*
 *	Utility
 */
  final public Integer Integer() throws ParseException {
        String number;
        Token sign = null;
        String signStr = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        sign = jj_consume_token(PLUS);
        break;
      case MINUS:
        sign = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    number = NonComplexTerm();
        if ( sign != null )
        {
                signStr = sign.image;
        }
                {if (true) return Integer.valueOf(signStr + number);}
    throw new Error("Missing return statement in function");
  }

  final public Double Float() throws ParseException {
        Token number;
        Token sign = null;
        String signStr = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        sign = jj_consume_token(PLUS);
        break;
      case MINUS:
        sign = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    number = jj_consume_token(UFLOAT);
        if ( sign != null )
        {
                signStr = sign.image;
        }
                {if (true) return Double.valueOf(signStr + number.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_71()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(CP)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(REUSABLE)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CP)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(ROSPUBLISH)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(UFLOAT)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(OBRACKET)) return true;
    if (jj_3R_64()) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(CBRACKET)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(OBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CBRACE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(QPOINT)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CP)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(QPOINT)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(MINIZINC)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(PROLOG)) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(CUSTOM)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(ROS)) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(SIMULATE)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(CONDITIONAL)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(MATH)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(PROBABILISTIC)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(FINALLY)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(TASK)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(GOAL)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(GRAPH)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(RESOURCE)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(COST)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(TEMPORAL)) return true;
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(NON_COMPLEX_TERM)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(OP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(INITIAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DomainParser_v4TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdffe40,0x0,0x0,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x100,0x0,0x0,0xc01500,0xc01500,0xc01500,0xc01500,0x100,0xc01500,0xc01500,0x100,0xe,0x100,0x100,0x100,0x100,0x0,0x100,0x100,0x100,0x100,0x0,0xc00000,0xc00000,0xc00000,0xc00000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x80,0x4,0x284,0x284,0x200,0x284,0x80,0x284,0x284,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x84,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[25];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DomainParser_v4(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DomainParser_v4(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DomainParser_v4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DomainParser_v4(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DomainParser_v4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DomainParser_v4(DomainParser_v4TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DomainParser_v4TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 25; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
