/* Generated By:JavaCC: Do not edit this line. DomainParser_v4Constants.java */
package org.spiderplan.representation.parser.domain_v4;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DomainParser_v4Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INCLUDE = 6;
  /** RegularExpression Id. */
  int EXECUTION = 7;
  /** RegularExpression Id. */
  int TEMPORAL = 8;
  /** RegularExpression Id. */
  int COST = 9;
  /** RegularExpression Id. */
  int MATH = 10;
  /** RegularExpression Id. */
  int SET = 11;
  /** RegularExpression Id. */
  int GRAPH = 12;
  /** RegularExpression Id. */
  int PROLOG = 13;
  /** RegularExpression Id. */
  int DOMAIN = 14;
  /** RegularExpression Id. */
  int GOAL = 15;
  /** RegularExpression Id. */
  int FINALLY = 16;
  /** RegularExpression Id. */
  int MINIZINC = 17;
  /** RegularExpression Id. */
  int RESOURCE = 18;
  /** RegularExpression Id. */
  int CONDITIONAL = 19;
  /** RegularExpression Id. */
  int CONDITION = 20;
  /** RegularExpression Id. */
  int PROBABILISTIC = 21;
  /** RegularExpression Id. */
  int ROS = 22;
  /** RegularExpression Id. */
  int ROSPUBLISH = 23;
  /** RegularExpression Id. */
  int ROSSUBSCRIBE = 24;
  /** RegularExpression Id. */
  int ROSREGACTION = 25;
  /** RegularExpression Id. */
  int ROSGOAL = 26;
  /** RegularExpression Id. */
  int RESOLVER = 27;
  /** RegularExpression Id. */
  int CAPACITY = 28;
  /** RegularExpression Id. */
  int REUSABLE = 29;
  /** RegularExpression Id. */
  int CONSUMABLE = 30;
  /** RegularExpression Id. */
  int INITIAL = 31;
  /** RegularExpression Id. */
  int CUSTOM = 32;
  /** RegularExpression Id. */
  int SIMULATE = 33;
  /** RegularExpression Id. */
  int STATEMENT = 34;
  /** RegularExpression Id. */
  int OPERATOR = 35;
  /** RegularExpression Id. */
  int PRECONDITIONS = 36;
  /** RegularExpression Id. */
  int EFFECTS = 37;
  /** RegularExpression Id. */
  int CONSTRAINTS = 38;
  /** RegularExpression Id. */
  int OP = 39;
  /** RegularExpression Id. */
  int CP = 40;
  /** RegularExpression Id. */
  int OBRACKET = 41;
  /** RegularExpression Id. */
  int CBRACKET = 42;
  /** RegularExpression Id. */
  int OBRACE = 43;
  /** RegularExpression Id. */
  int CBRACE = 44;
  /** RegularExpression Id. */
  int BAR = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int COLON = 48;
  /** RegularExpression Id. */
  int ASSIGNMENT = 49;
  /** RegularExpression Id. */
  int SEMICOLON = 50;
  /** RegularExpression Id. */
  int SLASH = 51;
  /** RegularExpression Id. */
  int TO = 52;
  /** RegularExpression Id. */
  int PLUS = 53;
  /** RegularExpression Id. */
  int MINUS = 54;
  /** RegularExpression Id. */
  int TIMES = 55;
  /** RegularExpression Id. */
  int DIVIDED = 56;
  /** RegularExpression Id. */
  int QMARKS = 57;
  /** RegularExpression Id. */
  int EQUALS = 58;
  /** RegularExpression Id. */
  int NEQUALS = 59;
  /** RegularExpression Id. */
  int NEG = 60;
  /** RegularExpression Id. */
  int LESS = 61;
  /** RegularExpression Id. */
  int LESSEQ = 62;
  /** RegularExpression Id. */
  int GREATER = 63;
  /** RegularExpression Id. */
  int GREATEREQ = 64;
  /** RegularExpression Id. */
  int QPOINT = 65;
  /** RegularExpression Id. */
  int HASH = 66;
  /** RegularExpression Id. */
  int DOLLAR = 67;
  /** RegularExpression Id. */
  int UNDERSCORE = 68;
  /** RegularExpression Id. */
  int PACKAGE = 69;
  /** RegularExpression Id. */
  int NON_COMPLEX_TERM = 70;
  /** RegularExpression Id. */
  int STRING = 71;
  /** RegularExpression Id. */
  int UFLOAT = 72;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"include\"",
    "\"execution\"",
    "\"temporal\"",
    "\"cost\"",
    "\"math\"",
    "\"sets\"",
    "\"graph\"",
    "\"prolog\"",
    "\"domain\"",
    "\"goal\"",
    "\"finally\"",
    "\"minizinc\"",
    "\"resource\"",
    "\"conditional\"",
    "\"condition\"",
    "\"probabilistic\"",
    "\"ros\"",
    "\"publish-to\"",
    "\"subscribe-to\"",
    "\"register-action\"",
    "\"is-goal\"",
    "\"resolver\"",
    "\"capacity\"",
    "\"reusable\"",
    "\"consumable\"",
    "\"initial-context\"",
    "\"custom\"",
    "\"simulate\"",
    "\"statement\"",
    "\"operator\"",
    "\"preconditions\"",
    "\"effects\"",
    "\"constraints\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"|\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\":=\"",
    "\";\"",
    "\"/\"",
    "\"->\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"\\\\\"",
    "\"\\\"\"",
    "\"=\"",
    "\"!=\"",
    "\"!\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"?\"",
    "\"#\"",
    "\"$\"",
    "\"_\"",
    "<PACKAGE>",
    "<NON_COMPLEX_TERM>",
    "<STRING>",
    "<UFLOAT>",
  };

}
