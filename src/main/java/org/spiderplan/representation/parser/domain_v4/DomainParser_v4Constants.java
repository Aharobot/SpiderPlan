/* Generated By:JavaCC: Do not edit this line. DomainParser_v4Constants.java */
package org.spiderplan.representation.parser.domain_v4;
@SuppressWarnings("all")


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DomainParser_v4Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INCLUDE = 6;
  /** RegularExpression Id. */
  int EXECUTION = 7;
  /** RegularExpression Id. */
  int TEMPORAL = 8;
  /** RegularExpression Id. */
  int COST = 9;
  /** RegularExpression Id. */
  int OPTIMIZATION = 10;
  /** RegularExpression Id. */
  int MATH = 11;
  /** RegularExpression Id. */
  int SET = 12;
  /** RegularExpression Id. */
  int GRAPH = 13;
  /** RegularExpression Id. */
  int PROLOG = 14;
  /** RegularExpression Id. */
  int DOMAIN = 15;
  /** RegularExpression Id. */
  int GOAL = 16;
  /** RegularExpression Id. */
  int TASK = 17;
  /** RegularExpression Id. */
  int FINALLY = 18;
  /** RegularExpression Id. */
  int MINIZINC = 19;
  /** RegularExpression Id. */
  int RESOURCE = 20;
  /** RegularExpression Id. */
  int CONDITIONAL = 21;
  /** RegularExpression Id. */
  int IC = 22;
  /** RegularExpression Id. */
  int CONDITION = 23;
  /** RegularExpression Id. */
  int SAMPLING = 24;
  /** RegularExpression Id. */
  int CONFIGURATIONPLANNING = 25;
  /** RegularExpression Id. */
  int ROS = 26;
  /** RegularExpression Id. */
  int RESOLVER = 27;
  /** RegularExpression Id. */
  int CAPACITY = 28;
  /** RegularExpression Id. */
  int INITIAL = 29;
  /** RegularExpression Id. */
  int CUSTOM = 30;
  /** RegularExpression Id. */
  int SIMULATE = 31;
  /** RegularExpression Id. */
  int STATEMENT = 32;
  /** RegularExpression Id. */
  int OPERATOR = 33;
  /** RegularExpression Id. */
  int PRECONDITIONS = 34;
  /** RegularExpression Id. */
  int EFFECTS = 35;
  /** RegularExpression Id. */
  int CONSTRAINTS = 36;
  /** RegularExpression Id. */
  int ROSPUBLISH = 37;
  /** RegularExpression Id. */
  int ROSSUBSCRIBE = 38;
  /** RegularExpression Id. */
  int ROSREGACTION = 39;
  /** RegularExpression Id. */
  int ROSGOAL = 40;
  /** RegularExpression Id. */
  int REUSABLE = 41;
  /** RegularExpression Id. */
  int OP = 42;
  /** RegularExpression Id. */
  int CP = 43;
  /** RegularExpression Id. */
  int OBRACKET = 44;
  /** RegularExpression Id. */
  int CBRACKET = 45;
  /** RegularExpression Id. */
  int OBRACE = 46;
  /** RegularExpression Id. */
  int CBRACE = 47;
  /** RegularExpression Id. */
  int BAR = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int COLON = 51;
  /** RegularExpression Id. */
  int PLUS = 52;
  /** RegularExpression Id. */
  int MINUS = 53;
  /** RegularExpression Id. */
  int QMARKS = 54;
  /** RegularExpression Id. */
  int QPOINT = 55;
  /** RegularExpression Id. */
  int NON_COMPLEX_TERM = 56;
  /** RegularExpression Id. */
  int STRING = 57;
  /** RegularExpression Id. */
  int UFLOAT = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\":include\"",
    "\":execution\"",
    "\":temporal\"",
    "\":cost\"",
    "\":optimization\"",
    "\":math\"",
    "\":set\"",
    "\":graph\"",
    "\":prolog\"",
    "\":domain\"",
    "\":goal\"",
    "\":task\"",
    "\":finally\"",
    "\":minizinc\"",
    "\":resource\"",
    "\":conditional\"",
    "\":ic\"",
    "\":condition\"",
    "\":sampling\"",
    "\":configuration-planning\"",
    "\":ros\"",
    "\":resolver\"",
    "\":capacity\"",
    "\":initial-context\"",
    "\":custom\"",
    "\":simulate\"",
    "\":statement\"",
    "\":operator\"",
    "\":preconditions\"",
    "\":effects\"",
    "\":constraints\"",
    "\"publish-to\"",
    "\"subscribe-to\"",
    "\"register-action\"",
    "\"is-goal\"",
    "\"reusable\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"|\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"\\\"\"",
    "\"?\"",
    "<NON_COMPLEX_TERM>",
    "<STRING>",
    "<UFLOAT>",
  };

}
