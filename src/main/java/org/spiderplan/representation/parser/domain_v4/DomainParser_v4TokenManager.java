/* Generated By:JavaCC: Do not edit this line. DomainParser_v4TokenManager.java */
package org.spiderplan.representation.parser.domain_v4;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collection;
import java.util.Scanner;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.charset.*;
import java.io.IOException;
import java.net.URL;
import org.spiderplan.representation.*;
import org.spiderplan.representation.types.*;
import org.spiderplan.representation.expressions.*;
import org.spiderplan.representation.expressions.execution.ros.*;
import org.spiderplan.representation.expressions.causal.*;
import org.spiderplan.representation.expressions.cost.*;
import org.spiderplan.representation.expressions.optimization.*;
import org.spiderplan.representation.expressions.domain.*;
import org.spiderplan.representation.expressions.execution.*;
import org.spiderplan.representation.expressions.graph.*;
import org.spiderplan.representation.expressions.interaction.*;
import org.spiderplan.representation.expressions.math.*;
import org.spiderplan.representation.expressions.minizinc.*;
import org.spiderplan.representation.expressions.misc.*;
import org.spiderplan.representation.expressions.programs.*;
import org.spiderplan.representation.expressions.prolog.*;
import org.spiderplan.representation.expressions.ontology.*;
import org.spiderplan.representation.expressions.resources.*;
import org.spiderplan.representation.expressions.sampling.*;
import org.spiderplan.representation.expressions.set.*;
import org.spiderplan.representation.expressions.temporal.*;
import org.spiderplan.representation.expressions.configurationPlanning.*;
import org.spiderplan.modules.solvers.Core;
import org.spiderplan.representation.logic.*;
import org.spiderplan.temporal.TemporalNetworkTools;
import org.spiderplan.tools.UniqueID;
@SuppressWarnings("all")

/** Token Manager. */
public class DomainParser_v4TokenManager implements DomainParser_v4Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
            return 10;
         if ((active0 & 0x80000000000000L) != 0L)
            return 11;
         if ((active0 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x20000000000L) != 0L)
            return 4;
         if ((active0 & 0x5c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000000L) != 0L)
            return 4;
         if ((active0 & 0x1c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x1c000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000L) != 0L)
            return 4;
         if ((active0 & 0x18000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 9;
            }
            return 4;
         }
         return -1;
      case 10:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 10;
            return 4;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000000000L) != 0L)
            return 4;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      case 12:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
            return 4;
         }
         return -1;
      case 13:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 13;
            return 4;
         }
         return -1;
      case 14:
         if ((active0 & 0x10000000000L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 55, 11);
      case 40:
         return jjStopAtPos(0, 43);
      case 41:
         return jjStopAtPos(0, 44);
      case 43:
         return jjStopAtPos(0, 53);
      case 44:
         return jjStopAtPos(0, 50);
      case 45:
         return jjStopAtPos(0, 54);
      case 46:
         return jjStartNfaWithStates_0(0, 51, 10);
      case 58:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x3fffffffc0L);
      case 63:
         return jjStopAtPos(0, 56);
      case 91:
         return jjStopAtPos(0, 45);
      case 93:
         return jjStopAtPos(0, 46);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x50000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 123:
         return jjStopAtPos(0, 47);
      case 124:
         return jjStopAtPos(0, 49);
      case 125:
         return jjStopAtPos(0, 48);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x20a5400200L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x51000000080L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x22000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40800040L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000400L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800004000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x18200000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20302009000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x22040800L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L);
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10201100L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100180000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000040L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200d430200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400008400L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800006000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20002a000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000080L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10040000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x102010100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2005580000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x48090240200L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40020090000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000080L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 104:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(4, 11);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000100400L);
      case 107:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x4040L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20010200000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x2002100L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x12000000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(4, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x2c0000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x45410000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x112080000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x880004100L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000c0L);
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x140000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 103:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8022100400L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000080000L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000200100L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1401400080L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000100L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(7, 6);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x210000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400080L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2100000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(7, 36);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x120000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x10040000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(8, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2800000000L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(8, 8);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400080L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(8, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x10004000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(9, 7);
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x2000400000L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 4);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(9, 33);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000400L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0xa004000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(11, 22);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 4);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000400L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(11, 37);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(13, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 40, 4);
         break;
      case 120:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(15, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(22, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 34)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  break;
               case 0:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 59)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if ((0x3ff800000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ffa00000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 34 && kind > 58)
                     kind = 58;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 6:
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 0:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\72\151\156\143\154\165\144\145", 
"\72\145\170\145\143\165\164\151\157\156", "\72\164\145\155\160\157\162\141\154", "\72\143\157\163\164", 
"\72\157\160\164\151\155\151\172\141\164\151\157\156", "\72\155\141\164\150", "\72\163\145\164", "\72\147\162\141\160\150", 
"\72\160\162\157\154\157\147", "\72\163\160\141\162\161\154", "\72\144\157\155\141\151\156", 
"\72\147\157\141\154", "\72\164\141\163\153", "\72\146\151\156\141\154\154\171", 
"\72\155\151\156\151\172\151\156\143", "\72\162\145\163\157\165\162\143\145", 
"\72\143\157\156\144\151\164\151\157\156\141\154", "\72\151\143", "\72\143\157\156\144\151\164\151\157\156", 
"\72\163\141\155\160\154\151\156\147", 
"\72\143\157\156\146\151\147\165\162\141\164\151\157\156\55\160\154\141\156\156\151\156\147", "\72\162\157\163", "\72\162\145\163\157\154\166\145\162", 
"\72\143\141\160\141\143\151\164\171", "\72\151\156\151\164\151\141\154\55\143\157\156\164\145\170\164", 
"\72\143\165\163\164\157\155", "\72\163\151\155\165\154\141\164\145", 
"\72\163\164\141\164\145\155\145\156\164", "\72\157\160\145\162\141\164\157\162", 
"\72\160\162\145\143\157\156\144\151\164\151\157\156\163", "\72\145\146\146\145\143\164\163", 
"\72\143\157\156\163\164\162\141\151\156\164\163", "\160\165\142\154\151\163\150\55\164\157", 
"\163\165\142\163\143\162\151\142\145\55\164\157", "\162\145\147\151\163\164\145\162\55\141\143\164\151\157\156", 
"\151\163\55\147\157\141\154", "\162\145\165\163\141\142\154\145", "\50", "\51", "\133", "\135", "\173", 
"\175", "\174", "\54", "\56", "\72", "\53", "\55", "\42", "\77", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[11];
private final int[] jjstateSet = new int[22];
protected char curChar;
/** Constructor. */
public DomainParser_v4TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DomainParser_v4TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 11; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
