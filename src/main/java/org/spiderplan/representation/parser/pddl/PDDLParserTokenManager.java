/* Generated By:JavaCC: Do not edit this line. PDDLParserTokenManager.java */
package org.spiderplan.representation.parser.pddl;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import org.spiderplan.representation.*;
import org.spiderplan.representation.types.*;
import org.spiderplan.representation.constraints.*;
import org.spiderplan.modules.solvers.Core;
import org.spiderplan.representation.logic.*;
import org.spiderplan.temporal.TemporalNetworkTools;
import org.spiderplan.tools.UniqueID;

/** Token Manager. */
public class PDDLParserTokenManager implements PDDLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fff000002c0L) != 0L)
         {
            jjmatchedKind = 74;
            return 4;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 6;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 16;
         if ((active1 & 0x100L) != 0L)
            return 11;
         if ((active0 & 0x80000000000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x3fe3000002c0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 1;
            }
            return 4;
         }
         if ((active0 & 0x1c00000000L) != 0L)
            return 4;
         return -1;
      case 2:
         if ((active0 & 0x10100000000L) != 0L)
            return 4;
         if ((active0 & 0x3ee2000002c0L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x3ee2000002c0L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x3ee0000002c0L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x880000000c0L) != 0L)
            return 4;
         if ((active0 & 0x366000000200L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
            return 4;
         if ((active0 & 0x366000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 6;
            }
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x166000000000L) != 0L)
            return 4;
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0x200000000000L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 34:
         return jjStartNfaWithStates_0(0, 62, 16);
      case 35:
         return jjStopAtPos(0, 71);
      case 36:
         return jjStartNfaWithStates_0(0, 72, 11);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 42:
         return jjStopAtPos(0, 60);
      case 43:
         return jjStopAtPos(0, 58);
      case 44:
         return jjStopAtPos(0, 52);
      case 45:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 53, 6);
      case 47:
         return jjStopAtPos(0, 56);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x400000fffffd00L, 0x0L);
      case 59:
         return jjStartNfaWithStates_0(0, 55, 17);
      case 60:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 61:
         return jjStopAtPos(0, 63);
      case 62:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 63:
         return jjStopAtPos(0, 70);
      case 91:
         return jjStopAtPos(0, 48);
      case 92:
         return jjStopAtPos(0, 61);
      case 93:
         return jjStopAtPos(0, 49);
      case 95:
         return jjStopAtPos(0, 73);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x91c00000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000000c0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 50);
      case 125:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000102000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x300011000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0xa10100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004000040L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xa020000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000080L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2480400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000008000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00064000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000400000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000102000L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 4);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000800L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000040L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x51000300L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xa11000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x44000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000080L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x802080000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x86020000040L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x11001000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x60200e18000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80102000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xe10100L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2001000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1080000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x36800c060000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10e080L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000040L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x60600000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x6081080900L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 4);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2102000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 4);
         break;
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x10a11000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400400L);
      case 103:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xa11000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 4);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2002000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000800L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0x9000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 4);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 4);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 4);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1020000L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         break;
      case 109:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000801000L);
      case 112:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 4);
         break;
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x210000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x610000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x21000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10080000L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x210000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x80800L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(9, 24);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 4);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(9, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x210000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(10, 19);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(10, 22);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x210000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x2800L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 25);
         break;
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(12, 11);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x210000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x210000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x210000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(16, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(22, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 36)
                     jjCheckNAdd(11);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  else if (curChar == 59)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     jjCheckNAdd(4);
                  }
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                  {
                     if (kind > 76)
                        kind = 76;
                  }
                  break;
               case 17:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 76)
                     kind = 76;
                  break;
               case 10:
                  if (curChar == 36)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xffffbfffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 46 && kind > 78)
                     kind = 78;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 5);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(4);
                  break;
               case 16:
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 17:
               case 1:
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(4);
                  break;
               case 11:
                  jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 17:
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   14, 5, 15, 11, 12, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\144\145\146\151\156\145", 
"\144\157\155\141\151\156", "\72\144\157\155\141\151\156", "\160\162\157\142\154\145\155", 
"\72\160\162\157\142\154\145\155", "\72\162\145\161\165\151\162\145\155\145\156\164\163", 
"\72\146\165\156\143\164\151\157\156\163", "\72\141\143\164\151\157\156\55\143\157\163\164\163", 
"\72\164\171\160\151\156\147", "\72\163\164\162\151\160\163", 
"\72\144\165\162\141\164\151\166\145\55\141\143\164\151\157\156\163", 
"\72\164\151\155\145\144\55\151\156\151\164\151\141\154\55\154\151\164\145\162\141\154\163", "\72\164\171\160\145\163", "\72\160\162\145\144\151\143\141\164\145\163", 
"\72\141\143\164\151\157\156", "\72\144\165\162\141\164\151\166\145\55\141\143\164\151\157\156", 
"\72\160\141\162\141\155\145\164\145\162\163", "\72\144\165\162\141\164\151\157\156", 
"\72\143\157\156\144\151\164\151\157\156", "\72\160\162\145\143\157\156\144\151\164\151\157\156", 
"\72\145\146\146\145\143\164", "\72\157\142\152\145\143\164\163", "\72\143\157\156\163\164\141\156\164\163", 
"\72\151\156\151\164", "\72\147\157\141\154", "\72\155\145\164\162\151\143", "\156\157\164", 
"\157\166\145\162\40\141\154\154", "\141\164\40\163\164\141\162\164", "\141\164\40\145\156\144", "\141\164", 
"\155\151\156\151\155\151\172\145", "\155\141\170\151\155\151\172\145", "\145\151\164\150\145\162", 
"\141\156\144", "\151\156\143\162\145\141\163\145", "\144\145\143\162\145\141\163\145", 
"\141\163\163\151\147\156", "\163\143\141\154\145\55\165\160", "\163\143\141\154\145\55\144\157\167\156", 
"\50", "\51", "\133", "\135", "\173", "\175", "\54", "\56", "\72\75", "\73", "\57", 
"\55\76", "\53", "\55", "\52", "\134", "\42", "\75", "\41\75", "\41", "\74", "\74\75", 
"\76", "\76\75", "\77", "\43", "\44", "\137", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[16];
private final int[] jjstateSet = new int[32];
protected char curChar;
/** Constructor. */
public PDDLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PDDLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
