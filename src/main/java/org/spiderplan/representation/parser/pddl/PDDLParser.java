/* Generated By:JavaCC: Do not edit this line. PDDLParser.java */
package org.spiderplan.representation.parser.pddl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.spiderplan.representation.*;
import org.spiderplan.representation.types.*;
import org.spiderplan.representation.constraints.*;
import org.spiderplan.modules.solvers.Core;
import org.spiderplan.representation.logic.*;
import org.spiderplan.temporal.TemporalNetworkTools;
import org.spiderplan.tools.UniqueID;

public class PDDLParser implements PDDLParserConstants {
        Core c;
        Map<String,String> typeMapping;
        static public boolean verbose = true;

        private class StatementConstraintPair   {
                public Statement s;
                public AllenConstraint c;
                public StatementConstraintPair( Statement s, AllenConstraint c )
                {
                  this.s = s;
                  this.c = c;
                }
        }

  final public void CompilationUnit(Core c) throws ParseException {
  this.c = c;
  this.typeMapping = new HashMap<String,String >();
    jj_consume_token(OP);
    jj_consume_token(DEFINE);
    if (jj_2_1(2)) {
      DomainDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ProblemDefinition();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CP);
  }

  final public void DomainDefinition() throws ParseException {
        Token domainName;
                        c.getContext().add(new PlanningInterval(Term.createInteger(0), Term.createConstant("inf")));
    jj_consume_token(OP);
    jj_consume_token(DOMAIN);
    domainName = jj_consume_token(TERM);
    jj_consume_token(CP);
    Requirements();
    Types();
    if (jj_2_2(2)) {
      Constants();
    } else {
      ;
    }
    Predicates();
    if (jj_2_3(2)) {
      Functions();
    } else {
      ;
    }
    label_1:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_1;
      }
      DurativeAction();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Action();
    }
  }

  final public void ProblemDefinition() throws ParseException {
        Token problemName;
        Token domainName;
    jj_consume_token(OP);
    jj_consume_token(PROBLEM);
    problemName = jj_consume_token(TERM);
    jj_consume_token(CP);
    jj_consume_token(OP);
    jj_consume_token(COLDOMAIN);
    domainName = jj_consume_token(TERM);
    jj_consume_token(CP);
    Objects();
    Init();
    Goal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      Metric();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void Init() throws ParseException {
        Atomic variable;
        Term value;
        Token termToken = null;
        boolean isNegated = false;
        boolean isFunctionAssignment = false;
        int eventTime = 0;
        Token eventTimeToken;
        int litCounter = 0;
    jj_consume_token(OP);
    jj_consume_token(INIT);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
                                isNegated = false;
                                isFunctionAssignment = false;
                                eventTime = 0;
      if (jj_2_8(2)) {
        jj_consume_token(OP);
        jj_consume_token(EQUALS);
        variable = Relation();
        termToken = jj_consume_token(TERM);
        jj_consume_token(CP);
                                                                                                        isFunctionAssignment = true;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          if (jj_2_7(2)) {
            variable = Relation();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OP:
              if (jj_2_6(2)) {
                jj_consume_token(OP);
                jj_consume_token(NOT);
                variable = Relation();
                jj_consume_token(CP);
                                                                           isNegated = true;
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case OP:
                  if (jj_2_5(2)) {
                    jj_consume_token(OP);
                    jj_consume_token(AT);
                    eventTimeToken = jj_consume_token(TERM);
                    jj_consume_token(OP);
                    jj_consume_token(NOT);
                    variable = Relation();
                    jj_consume_token(CP);
                    jj_consume_token(CP);
                                                                                                               eventTime = Integer.valueOf(eventTimeToken.image).intValue();isNegated = true;
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case OP:
                      jj_consume_token(OP);
                      jj_consume_token(AT);
                      eventTimeToken = jj_consume_token(TERM);
                      variable = Relation();
                      jj_consume_token(CP);
                                                                                           eventTime = Integer.valueOf(eventTimeToken.image).intValue();
                      break;
                    default:
                      jj_la1[4] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                  break;
                default:
                  jj_la1[5] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                if ( !isFunctionAssignment ) {
                                        if ( !isNegated )
                                                { value = Term.createConstant("true");  }
                                        else
                                                { value = Term.createConstant("false");  }

                                        Statement s = new Statement(Term.createConstant("s"+(litCounter++)), variable, value);

                                        c.getContext().add(s);
                                        c.getContext().add(new AllenConstraint(s.getKey() + " Release ["+eventTime+","+eventTime+"]"));
                                } else { // Function assignments are added to background knowledge (as asserted relational constraints)
                                        String newAtomicStr;
                                        if ( variable.getNumArgs() > 0 )
                                                newAtomicStr = variable.toString().substring(0,variable.toString().length()-1)+","+termToken.image+")";
                                        else
                                                newAtomicStr = variable.toString().substring(0,variable.toString().length()-1)+termToken.image+")";

                                        //if ( c.getTypeManager().getVariableClass(variable.getUniqueName()).equals("cost") ) {
/*
					if ( c.getTypeManager().getPredicateTypes(variable.getUniqueName(), -1).getClass().getSimpleName().equals("FloatType") ) {
						c.getContext().add(new CostCalculation(variable, termToken.image));
					}
*/

                                        Atomic r = new Atomic(newAtomicStr);
                                        PrologConstraint rC = new PrologConstraint(r,Term.createConstant("pddlKB"));
                                        rC.setAsserted(true);
                                        c.getContext().add(rC);
                                }
    }
    jj_consume_token(CP);
  }

  final public void Goal() throws ParseException {
        Atomic variable;
        Term value;
        boolean isNegated = false;
        int eventTime = 0;
        Token eventTimeToken;
        int litCounter = 0;
        ArrayList<Term > goalList = new ArrayList<Term >();
    jj_consume_token(OP);
    jj_consume_token(GOAL);
    jj_consume_token(OP);
    jj_consume_token(AND);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
                                isNegated = false;
                                eventTime = 0;
      if (jj_2_9(2)) {
        variable = Relation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          jj_consume_token(OP);
          jj_consume_token(NOT);
          variable = Relation();
          jj_consume_token(CP);
                                                                           isNegated = true;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                if ( !isNegated )
                                        { value = Term.createConstant("true");  }
                                else
                                        { value = Term.createConstant("false");  }

                                Statement s = new Statement(Term.createConstant("G"+(litCounter++)), variable, value);

                                c.getContext().add(s);
                                c.getContext().add(new OpenGoal(s));
                                goalList.add(s.getKey());
    }
    jj_consume_token(CP);
    jj_consume_token(CP);
                if ( goalList.size() > 1 )
                {
                        Statement gSync = new Statement(Term.createConstant("sync"), new Atomic("sync"), Term.createConstant("true"));
                        c.getTypeManager().attachTypes(new Atomic("sync"), Term.createConstant("boolean") );

                        for ( Term i : goalList )
                        {
                                c.getContext().add(new AllenConstraint("sync During " + i + " [1,inf] [1,inf]"));
                        }
                        c.getContext().add(new AllenConstraint("sync Duration [1,1]"));
                        c.getContext().add(gSync);

                }
  }

  final public void Requirements() throws ParseException {
    jj_consume_token(OP);
    jj_consume_token(REQUIREMENTS);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACTIONCOSTS:
      case TYPING:
      case STRIPS:
      case DURATIVE_ACTIONS:
      case TIMED_INITIAL_LITERALS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPING:
        jj_consume_token(TYPING);
        break;
      case DURATIVE_ACTIONS:
        jj_consume_token(DURATIVE_ACTIONS);
        break;
      case TIMED_INITIAL_LITERALS:
        jj_consume_token(TIMED_INITIAL_LITERALS);
        break;
      case STRIPS:
        jj_consume_token(STRIPS);
        break;
      case ACTIONCOSTS:
        jj_consume_token(ACTIONCOSTS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CP);
  }

  final public void Types() throws ParseException {
  Token typeToken;
  Token superTypeToken;
  ArrayList<Token> typeList;
    jj_consume_token(OP);
    jj_consume_token(TYPES);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
                        typeList = new ArrayList<Token>();
                                superTypeToken = null;
      label_7:
      while (true) {
        typeToken = jj_consume_token(TERM);
                                typeList.add(typeToken);
        if (jj_2_10(2)) {
          ;
        } else {
          break label_7;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        superTypeToken = jj_consume_token(TERM);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
                          for ( Token tToken : typeList )
                          {
                                  EnumType t = new EnumType();
                                  Term tName = Term.createConstant(tToken.image);
                                  tName = tName.makeConstant();

                                  t.setName(tName.toString());

                                  if ( ! c.getTypeManager().hasTypeWithName(tName) )
                                        c.getTypeManager().addNewType(t);

                                  if ( superTypeToken != null )
                                  {
                                    Term superTypeName = Term.createConstant(superTypeToken.image);
                                        if ( !c.getTypeManager().hasTypeWithName(superTypeName) ) {

                                                EnumType superType = new EnumType();
                                                superType.setName(superTypeToken.image);
                                                c.getTypeManager().addNewType(superType);
                                        }

                                        EnumType superType = (EnumType)c.getTypeManager().getTypeByName(superTypeName);
                                        superType.getDomain().add(Term.createConstant(tToken.image));
                                  }
                          }
    }
    jj_consume_token(CP);
  }

  final public void Objects() throws ParseException {
        Token typeToken;
        Token valueToken;
        ArrayList<Term> values;
    jj_consume_token(OP);
    jj_consume_token(OBJECTS);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
                                values = new ArrayList<Term>();
      label_9:
      while (true) {
        valueToken = Term();
                                  valueToken.image = valueToken.image.substring(0, 1).toLowerCase() + valueToken.image.substring(1);
                                        values.add(Term.createConstant(valueToken.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TERM:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(MINUS);
      typeToken = jj_consume_token(TERM);
                            Term tName = Term.createConstant(typeToken.image);
                                tName = tName.makeConstant();
                                c.getTypeManager().getTypeByName(tName).getDomain().addAll(values);
    }
    jj_consume_token(CP);
                System.out.println(c.getTypeManager() + "\u005cn===");
                c.getTypeManager().updateTypeDomains();
  }

  final public void Constants() throws ParseException {
        Token typeToken;
        Token valueToken;
        ArrayList<Term> values;
    jj_consume_token(OP);
    jj_consume_token(CONSTANTS);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
                                values = new ArrayList<Term>();
      label_11:
      while (true) {
        valueToken = Term();
                                        valueToken.image = valueToken.image.substring(0, 1).toLowerCase() + valueToken.image.substring(1);
                                        values.add(Term.createConstant(valueToken.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TERM:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(MINUS);
      typeToken = jj_consume_token(TERM);
                            Term tName = Term.createConstant(typeToken.image);
                                tName = tName.makeConstant();
                                c.getTypeManager().getTypeByName(tName).getDomain().addAll(values);
    }
    jj_consume_token(CP);
  }

  final public Atomic Relation() throws ParseException {
        Token nameToken;
        Token argToken;
        Atomic r;
        ArrayList<Term> argList = new ArrayList<Term>();
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERM:
      nameToken = jj_consume_token(TERM);
      break;
    case AT:
      nameToken = jj_consume_token(AT);
      break;
    case AND:
      nameToken = jj_consume_token(AND);
      break;
    case MINIMIZE:
      nameToken = jj_consume_token(MINIMIZE);
      break;
    case MAXIMIZE:
      nameToken = jj_consume_token(MAXIMIZE);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QM:
      case TERM:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
                          boolean isVariable = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QM:
        jj_consume_token(QM);
                                  isVariable = true;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      argToken = Term();
                          String argStr = argToken.image;
                          if ( isVariable ) {
                                argStr = argStr.substring(0, 1).toUpperCase() + argStr.substring(1);
                          } else {
                                argStr = argStr.substring(0, 1).toLowerCase() + argStr.substring(1);
                          }
                          Term arg = Term.createConstant(argStr);
                          argList.add(arg);
    }
    jj_consume_token(CP);
                nameToken.image = nameToken.image.substring(0, 1).toLowerCase() + nameToken.image.substring(1);
                String s = nameToken.image.replace("-","");
                if ( !argList.isEmpty() )
                {
                        s += "("+argList.get(0);
                        for ( int i = 1 ; i < argList.size(); i++ )
                        {
                                s += ","+argList.get(i);
                        }
                        s += ")";

                }

                r = new Atomic(s);
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void Predicates() throws ParseException {
        Token nameToken;
        ArrayList<String> typedList;
        Token tmpArg;
    jj_consume_token(OP);
    jj_consume_token(PREDICATES);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      jj_consume_token(OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        nameToken = jj_consume_token(TERM);
        break;
      case AT:
        nameToken = jj_consume_token(AT);
        break;
      case AND:
        nameToken = jj_consume_token(AND);
        break;
      case MINIMIZE:
        nameToken = jj_consume_token(MINIMIZE);
        break;
      case MAXIMIZE:
        nameToken = jj_consume_token(MAXIMIZE);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      typedList = TypedList();
      jj_consume_token(CP);
                                nameToken.image = nameToken.image.substring(0, 1).toLowerCase() + nameToken.image.substring(1);
                                nameToken.image = nameToken.image.replace("-","");
                                Atomic name = null;
                                if ( typedList.isEmpty() )
                                {
                                  name = new Atomic(nameToken.image);
                                } else {
                                  String tStr = typedList.get(0).split("/")[1].substring(0, 1).toLowerCase() + typedList.get(0).split("/")[1].substring(1);

                                  String s = nameToken.image + "(" + tStr;
                                  for ( int i = 1 ; i < typedList.size() ; i++ )
                                  {
                                    tStr = typedList.get(i).split("/")[1].substring(0, 1).toLowerCase() + typedList.get(i).split("/")[1].substring(1);

                                        s += ","+tStr;
                                  }
                                  s += ")";

                                  name = new Atomic(s);
                                }

                                c.getTypeManager().attachTypes( name, Term.createConstant("boolean") );
    }
    jj_consume_token(CP);
  }

  final public ArrayList<String> TypedList() throws ParseException {
        ArrayList<String> r = new ArrayList<String>();
        ArrayList<String> argList = new ArrayList<String>();
        boolean isVariable;
        Token argToken, typeToken;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QM:
      case TERM:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_14;
      }
                        argList = new ArrayList<String>();
      label_15:
      while (true) {
                     isVariable = false;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QM:
          jj_consume_token(QM);
                             isVariable = true;
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        argToken = Term();
                        String argStr = argToken.image;
                                if ( isVariable ) {
                                        argStr = argStr.substring(0, 1).toUpperCase() + argStr.substring(1);
                                }  else {
                                        argStr = argStr.substring(0, 1).toLowerCase() + argStr.substring(1);
                                }
                                argList.add(argStr);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QM:
        case TERM:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_15;
        }
      }
      jj_consume_token(MINUS);
      if (jj_2_11(2)) {
        typeToken = jj_consume_token(TERM);
                                String tStr = typeToken.image.substring(0, 1).toLowerCase() + typeToken.image.substring(1);
                                for ( String s : argList )
                                {
                                        r.add(s+"/"+tStr);
                                }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          jj_consume_token(OP);
                                ArrayList<Term> tNames = new ArrayList<Term>();
          jj_consume_token(EITHER);
          label_16:
          while (true) {
            typeToken = jj_consume_token(TERM);
                                        String tStr = typeToken.image.substring(0, 1).toLowerCase() + typeToken.image.substring(1);
                                        tNames.add(Term.createConstant(tStr));
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TERM:
              ;
              break;
            default:
              jj_la1[26] = jj_gen;
              break label_16;
            }
          }
                                String newSuperType = "either_" + tNames.get(0);
                                for ( int i = 1 ; i < tNames.size(); i++ ) {
                                  newSuperType += "_" + tNames.get(i);
                                }
                                Term superTypeToken = Term.createConstant(newSuperType);

                                if ( !c.getTypeManager().hasTypeWithName(superTypeToken) ) {
                                                EnumType superType = new EnumType();
                                                superType.setName(superTypeToken);
                                                superType.getDomain().addAll(tNames);
                                                c.getTypeManager().addNewType(superType);
                                }

                                for ( String s : argList ) {
                                        r.add(s+"/"+newSuperType);
                                }
          jj_consume_token(CP);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token Term() throws ParseException {
        Token r;
    r = jj_consume_token(TERM);
                r.image = r.image.replace("-","");
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void Action() throws ParseException {
        Token nameToken;
        Operator o = new Operator();
        StatementConstraintPair p;

        ArrayList<Term> argList = new ArrayList<Term>();
        ArrayList<String> typedList;
        Token argToken;
        Token typeToken;

        int conCounter = 0;
        int effCounter = 0;

        Token durToken;
        Token durVarToken;
        Atomic functionName;

        Constraint costCon;
    jj_consume_token(OP);
    jj_consume_token(ACTION);
    nameToken = jj_consume_token(TERM);
    jj_consume_token(PARAMETERS);
    jj_consume_token(OP);
    typedList = TypedList();
                                String sArgs = nameToken.image + "(";
                                String sTypes = nameToken.image + "(";

                                if ( !typedList.isEmpty() ) {
                                        sArgs += typedList.get(0).split("/")[0];
                                        sTypes += typedList.get(0).split("/")[1];

                                        for ( int i = 1 ; i < typedList.size() ; i++ ) {
                                                sArgs += "," + typedList.get(i).split("/")[0];
                                                sTypes += "," + typedList.get(i).split("/")[1];
                                        }

                                }
                                sArgs += ")";
                                sTypes += ")";

                                Atomic name = new Atomic(sArgs);
                                Atomic nameDef = new Atomic(sTypes);

                                o.setName(name);

                                c.getTypeManager().attachTypes( nameDef, Term.createConstant("boolean") );
    jj_consume_token(CP);
                                o.addConstraint(new AllenConstraint("THIS Duration [1,1]"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRECONDITION:
      jj_consume_token(PRECONDITION);
      if (jj_2_12(2)) {
        jj_consume_token(OP);
        jj_consume_token(AND);
        label_17:
        while (true) {
          p = StatementConstraintPair("P", conCounter++);
                            o.addPrecondition(p.s);
                            //o.addConstraint(new AllenConstraint(p.s.getKey() + " MeetsOrOverlapsOrFinishedByOrContains THIS [0,inf]"));

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_17;
          }
        }
        jj_consume_token(CP);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          p = StatementConstraintPair("P", conCounter++);
                            o.addPrecondition(p.s);
                            //o.addConstraint(new AllenConstraint(p.s.getKey() + " MeetsOrOverlapsOrFinishedByOrContains THIS [0,inf]"));

          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(EFFECT);
    if (jj_2_15(2)) {
      jj_consume_token(OP);
      jj_consume_token(AND);
      label_18:
      while (true) {
        if (jj_2_13(2)) {
          p = StatementConstraintPair("E", effCounter++);
                                                o.addEffect(p.s);
                                                o.addConstraint(new AllenConstraint("THIS Meets E"+(effCounter-1)));
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
            costCon = Cost();
                                                o.addConstraint(costCon);
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_18;
        }
      }
      jj_consume_token(CP);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        if (jj_2_14(2)) {
          p = StatementConstraintPair("E", effCounter++);
                                                o.addEffect(p.s);
                                                o.addConstraint(new AllenConstraint("THIS Meets E"+(effCounter-1)));
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
            costCon = Cost();
                                                o.addConstraint(costCon);
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CP);
                c.getOperators().add(o);
  }

  final public void DurativeAction() throws ParseException {
        Token nameToken;
        Operator o = new Operator();
        StatementConstraintPair p;

        ArrayList<Term> argList = new ArrayList<Term>();
        ArrayList<String> typedList;
        Token argToken;
        Token typeToken;

        int conCounter = 0;
        int effCounter = 0;

        Token durToken;
        Token durVarToken;
        Atomic functionName;
    jj_consume_token(OP);
    jj_consume_token(DURATIVE_ACTION);
    nameToken = jj_consume_token(TERM);
    jj_consume_token(PARAMETERS);
    jj_consume_token(OP);
    typedList = TypedList();
                                String sArgs = nameToken.image + "(";
                                String sTypes = nameToken.image + "(";

                                if ( !typedList.isEmpty() ) {
                                        sArgs += typedList.get(0).split("/")[0];
                                        sTypes += typedList.get(0).split("/")[1];

                                        for ( int i = 1 ; i < typedList.size() ; i++ ) {
                                                sArgs += "," + typedList.get(i).split("/")[0];
                                                sTypes += "," + typedList.get(i).split("/")[1];
                                        }

                                }
                                sArgs += ")";
                                sTypes += ")";

                                Atomic name = new Atomic(sArgs);
                                Atomic nameDef = new Atomic(sTypes);

                                System.out.println(name);
                                System.out.println(nameDef);

                                o.setName(name);

                                c.getTypeManager().attachTypes( nameDef, Term.createConstant("boolean") );
    jj_consume_token(CP);
    jj_consume_token(DURATION);
    jj_consume_token(OP);
    jj_consume_token(EQUALS);
    jj_consume_token(QM);
    durVarToken = jj_consume_token(TERM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERM:
      durToken = jj_consume_token(TERM);
                                        Term durTerm = Term.createConstant(durToken.image);
                                        o.addConstraint(new AllenConstraint("THIS Duration ["+durTerm+","+durTerm+"]"));
      break;
    case OP:
      functionName = Relation();
                                        String relConStr = functionName.toString().substring(0,functionName.toString().length()-1);
                                        Term durVarTerm = Term.createConstant(durVarToken.image);
                                        durVarTerm = Term.createVariable(durVarTerm.getName());
                                        relConStr += ","+durVarTerm + ")";
                                        PrologConstraint durCon = new PrologConstraint(new Atomic(relConStr),Term.createConstant("pddlKB"));
                                        o.addConstraint(new AllenConstraint("THIS Duration ["+durVarTerm+","+durVarTerm+"]"));
                                        o.addConstraint(durCon);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONDITION:
      jj_consume_token(CONDITION);
      if (jj_2_16(2)) {
        jj_consume_token(OP);
        jj_consume_token(AND);
        label_19:
        while (true) {
          p = StatementConstraintPair("P", conCounter++);
                            o.addPrecondition(p.s);
                            o.addConstraint(p.c);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_19;
          }
        }
        jj_consume_token(CP);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          p = StatementConstraintPair("P", conCounter++);
                            o.addPrecondition(p.s);
                            o.addConstraint(p.c);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(EFFECT);
    if (jj_2_17(2)) {
      jj_consume_token(OP);
      jj_consume_token(AND);
      label_20:
      while (true) {
        p = StatementConstraintPair("E", effCounter++);
                                o.addEffect(p.s);
                                /*if ( p.c.getRelation().equals(ConstraintTypes.TemporalRelation.MeetsOrOverlapsOrFinishedByOrContains) )
			  	{
			  		o.addConstraint(new AllenConstraint(p.c.getFrom() + " StartStart " + p.c.getTo() + " [0,0]"));
			  	} else {
					o.addConstraint(p.c);
			  	}*/
                                o.addConstraint(new AllenConstraint("E"+(effCounter-1)+ " Duration " + " [1,inf]"));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_20;
        }
      }
      jj_consume_token(CP);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        p = StatementConstraintPair("E", effCounter++);
                                o.addEffect(p.s);
                          /*	if ( p.c.getRelation().equals(ConstraintTypes.TemporalRelation.MeetsOrOverlapsOrFinishedByOrContains) )
			  	{
			  		o.addConstraint(new AllenConstraint(p.c.getFrom() + " StartStart " + p.c.getTo() + " [0,0]"));
			  	} else {
					o.addConstraint(p.c);
			  	}*/
                                o.addConstraint(new AllenConstraint("E"+(effCounter-1)+ " Duration " + " [1,inf]"));
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CP);
                c.getOperators().add(o);
  }

  final public StatementConstraintPair StatementConstraintPair(String kBase, int i) throws ParseException {
        StatementConstraintPair p;
        Statement s;
        AllenConstraint c = null;
        Term sKey = Term.createConstant(kBase+i);
        Term oKey = Term.createConstant("THIS");
        boolean isNegated = false;
        String tcType = null;
        String boundsStr = "[UNDEF-BOUNDS]";
        Atomic variable;
    if (jj_2_20(2)) {
      jj_consume_token(OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_START:
        jj_consume_token(AT_START);
                                           tcType = "MeetsOrOverlapsOrFinishedByOrContains"; boundsStr = "[0,inf]";
        break;
      case AT_END:
        jj_consume_token(AT_END);
                                           tcType = "Meets"; boundsStr = "";
        break;
      case OVER_ALL:
        jj_consume_token(OVER_ALL);
                                             tcType = "DuringOrEquals"; boundsStr = "[0,inf] [0,inf]";
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_18(2)) {
        variable = Relation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
          jj_consume_token(OP);
          jj_consume_token(NOT);
          variable = Relation();
          jj_consume_token(CP);
                                                                                  isNegated = true;
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CP);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        if (jj_2_19(2)) {
          variable = Relation();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP:
            jj_consume_token(OP);
            jj_consume_token(NOT);
            variable = Relation();
            jj_consume_token(CP);
                                                                          isNegated = true;
            break;
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if ( tcType != null )
                {
                        if ( !tcType.equals("DuringOrEquals") && !tcType.equals("Meets") ) {
                                c = new AllenConstraint(sKey + " " + tcType + " THIS " + boundsStr);
                        } else {
                          c = new AllenConstraint("THIS " + tcType + " " + sKey + " " + boundsStr);
                        }
                }
                Term value;
                if ( !isNegated ) {
                  value = Term.createConstant("true");
                } else {
                  value = Term.createConstant("false");
                }

                s = new Statement(sKey, variable, value);
                p = new StatementConstraintPair(s,c);
                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public void Metric() throws ParseException {
        Token optCritToken, dirToken;
    jj_consume_token(OP);
    jj_consume_token(METRIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINIMIZE:
      dirToken = jj_consume_token(MINIMIZE);
      break;
    case MAXIMIZE:
      dirToken = jj_consume_token(MAXIMIZE);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OP);
    optCritToken = jj_consume_token(TERM);
    jj_consume_token(CP);
                        String optCritStr = optCritToken.image;

                        if ( optCritStr.equals("total-time") )
                        {
                                optCritStr = "makeSpan";
                        }

                        OptimizationCriterium oC;
                        if ( dirToken.image.equals("minimize") ) {
                                oC = new OptimizationCriterium(new Atomic(optCritStr), OptimizationCriterium.OptDirection.Minimize);
                        } else {
                                oC = new OptimizationCriterium(new Atomic(optCritStr), OptimizationCriterium.OptDirection.Minimize);
                        }
                        c.getContext().add(oC);
    jj_consume_token(CP);
  }

  final public void Functions() throws ParseException {
        Token nameToken;
        ArrayList<Token> args;
        Token tmpArg;
        Token valTypeToken;
    jj_consume_token(OP);
    jj_consume_token(FUNCTIONS);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_21;
      }
      jj_consume_token(OP);
      nameToken = jj_consume_token(TERM);
                                        args = new ArrayList<Token>();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QM:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_22;
        }
        jj_consume_token(QM);
        jj_consume_token(TERM);
        jj_consume_token(MINUS);
        tmpArg = jj_consume_token(TERM);
                                        args.add(tmpArg);
      }
      jj_consume_token(CP);
      jj_consume_token(MINUS);
      valTypeToken = jj_consume_token(TERM);
                                Atomic name = null;
                                if ( args.isEmpty() )
                                {
                                  name = new Atomic(nameToken.image.replace("-","") + "(" + valTypeToken.image + ")");
                                } else {
                                  String s = nameToken.image.replace("-","") + "(" + args.get(0).image;
                                  for ( int i = 1 ; i < args.size() ; i++ )
                                  {
                                        s += ","+args.get(i).image;
                                  }
                                  s += "," + valTypeToken.image + ")";
                                  name = new Atomic(s);
                                }
                                if ( !c.getTypeManager().hasTypeWithName( Term.createConstant(valTypeToken.image) ) )
                                {
                                         // max. will be automatically adopted to largest occurring value later
                                        c.getTypeManager().addIntegerType(valTypeToken.image, 0, 1000);
                                }
                                c.getTypeManager().attachTypes( name, Term.createConstant(valTypeToken.image) );
    }
    jj_consume_token(CP);
  }

  final public Constraint Cost() throws ParseException {
        Atomic var;
        Token amountToken;
        Token modToken;
    jj_consume_token(OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREASE:
      modToken = jj_consume_token(INCREASE);
      break;
    case DECREASE:
      modToken = jj_consume_token(DECREASE);
      break;
    case ASSIGN:
      modToken = jj_consume_token(ASSIGN);
      break;
    case SCALEUP:
      modToken = jj_consume_token(SCALEUP);
      break;
    case SCALEDOWN:
      modToken = jj_consume_token(SCALEDOWN);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    var = Relation();
    amountToken = jj_consume_token(TERM);
    jj_consume_token(CP);
                /**
	  	  *	Costs are functions in PDDL and will be relations (since often functions are
	  	  * used for background knowledge. 
	  	  * When used as a cost we take the definition of the relation and create
	  	  * a cost definition from it.
	  	  */
                if ( c.getTypeManager().hasVariable(var.getUniqueName()) ) {
                        String relUniqueName = var.name() + "/" + (var.getNumArgs()+1);
                        Type t = c.getTypeManager().getPredicateTypes(relUniqueName,var.getNumArgs());

                        c.getTypeManager().attachTypes(var, Term.createConstant(t.getName().toString()) );
                }
                /*if ( modToken.image.equals("increase") ) {
	  	  	return new CostCalculation(var, var + " + " + amountToken.image);
	 	}
	 	if ( modToken.image.equals("decrease") ) {
	  	  	return new CostCalculation(var, var + " - " + amountToken.image);
	 	}
	 	if ( modToken.image.equals("scale-up") ) {
	  	  	return new CostCalculation(var, var + " * " + amountToken.image);
	 	}
	 	if ( modToken.image.equals("scale-down") ) {
	  	  	return new CostCalculation(var, var + " / " + amountToken.image);
	 	}
	 	if ( modToken.image.equals("assign") ) {
	  	  	return new CostCalculation(var, amountToken.image);
	 	}*/
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(OP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(FUNCTIONS)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(TERM)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(OVER_ALL)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(AT_END)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(AT_START)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(DURATIVE_ACTION)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(TERM)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(CONSTANTS)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(OP)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(OP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public PDDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e000,0x3e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x170,0x0,0x0,0x4000,0x170,0x0,0x0,0x0,0x0,0x4000,0x4000,0x4000,0x0,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x0,0x4000,0x4000,0xe,0x4000,0x4000,0x4000,0x60,0x4000,0x0,0x3e00,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x400,0x400,0x400,0x400,0x440,0x40,0x0,0x400,0x440,0x40,0x440,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[20];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PDDLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PDDLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PDDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PDDLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PDDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PDDLParser(PDDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PDDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
