/* Generated By:JavaCC: Do not edit this line. PlannerParserConstants.java */
package org.spiderplan.representation.parser.planner;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PlannerParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int OPTIONS = 10;
  /** RegularExpression Id. */
  int OPARENTHESIS = 11;
  /** RegularExpression Id. */
  int CPARENTHESIS = 12;
  /** RegularExpression Id. */
  int OBRACKET = 13;
  /** RegularExpression Id. */
  int CBRACKET = 14;
  /** RegularExpression Id. */
  int OBRACE = 15;
  /** RegularExpression Id. */
  int CBRACE = 16;
  /** RegularExpression Id. */
  int COMMA = 17;
  /** RegularExpression Id. */
  int DOT = 18;
  /** RegularExpression Id. */
  int COLON = 19;
  /** RegularExpression Id. */
  int SEMICOLON = 20;
  /** RegularExpression Id. */
  int SLASH = 21;
  /** RegularExpression Id. */
  int TO = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int TIMES = 25;
  /** RegularExpression Id. */
  int DIVIDED = 26;
  /** RegularExpression Id. */
  int QMARKS = 27;
  /** RegularExpression Id. */
  int EQUALS = 28;
  /** RegularExpression Id. */
  int NEQUALS = 29;
  /** RegularExpression Id. */
  int NEG = 30;
  /** RegularExpression Id. */
  int LESS = 31;
  /** RegularExpression Id. */
  int LESSEQ = 32;
  /** RegularExpression Id. */
  int GREATER = 33;
  /** RegularExpression Id. */
  int GREATEREQ = 34;
  /** RegularExpression Id. */
  int QPOINT = 35;
  /** RegularExpression Id. */
  int HASH = 36;
  /** RegularExpression Id. */
  int DOLLAR = 37;
  /** RegularExpression Id. */
  int INTERVAL = 38;
  /** RegularExpression Id. */
  int BOOLEAN = 39;
  /** RegularExpression Id. */
  int PACKAGE = 40;
  /** RegularExpression Id. */
  int INTVALUE = 41;
  /** RegularExpression Id. */
  int NON_COMPLEX_TERM = 42;
  /** RegularExpression Id. */
  int FLOAT = 43;
  /** RegularExpression Id. */
  int STRING = 44;
  /** RegularExpression Id. */
  int BRACED_BLOCK = 45;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSIDE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 5>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"Options\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\";\"",
    "\"/\"",
    "\"->\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"\\\\\"",
    "\"\\\"\"",
    "\"=\"",
    "\"!=\"",
    "\"!\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"?\"",
    "\"#\"",
    "\"$\"",
    "<INTERVAL>",
    "<BOOLEAN>",
    "<PACKAGE>",
    "<INTVALUE>",
    "<NON_COMPLEX_TERM>",
    "<FLOAT>",
    "<STRING>",
    "<BRACED_BLOCK>",
  };

}
