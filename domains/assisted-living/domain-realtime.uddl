(:initial-context
	(:domain 
		(enum human {Hans})
		(enum robot {r1})
		(enum agent {human robot})
		(enum object { tv couch trash-can remote-done-button nothing })
		(enum location { kitchen bedroom livingroom })
		(enum place { location robot })
		(enum activity-type { leaving relaxing cooking out })
		(enum switch { on off })
		(enum sensor-level { none low medium high })
		(enum phrase 
			{ 
				thanks 
				all-done
				trashcan-full
				(ask-for-object human object) 
				(ask-to-take-object human object location)
				(robot-moving robot location location) 
				(human-moving human location) 
				(clean human location)
				(human-put-reminder human object location)
				(human-moving-reminder human location)
				(thanks-for-cleaning human)
				(human-relaxing-while-cleaning human location)
				(empty-trashcan human)
			}
		)
		(enum feature { tidy full })
		(int intType [0 1000])
		(float posFloat [-10.0 10.0])

		(sig (object-location object) place)
		(sig (at agent) location)
		(sig (state location feature))
		(sig (object-state object feature))
		(sig (notEqual location location))
		(sig (busy agent) intType)

		(sig (:ros-move-goal posFloat posFloat))
		(sig (robot-is-moving) boolean)
		(sig (coordinates location posFloat posFloat))

		(sig (sensor-switch object) boolean)
		(sig (sensor-pressure-switch robot) boolean)
		(sig (sensor-pressure-high robot))

		;; Used by robot actions
		(sig (say phrase))
		
		;; Required input (from ROS or ICs)
		(sig (sensor object) boolean)
		(sig (human-location human) location)
		(sig (human-is-moving human location))
		(sig (activity human) activity-type)
		
		;; Operator signatures
		(sig (move-robot robot location location))
		(sig (move-human human location location))
		(sig (move-human-robot human robot location location))
		(sig (human-robot-cleaning human robot location))
		(sig (human-robot-empty-trash human robot))
		(sig (human-put human object  robot location))
		(sig (human-take human object robot location))
	)

	(:temporal
		(planning-interval [0 60000])
	)
	
	(:resource (reusable (busy r1)	 1))
	(:resource (reusable (busy Hans)	 1))

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Text files containing non-operator specific phrases
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	(:include (thanks "./data/domains/assisted-living/phrases/thanks"))
	(:include (all-done "./data/domains/assisted-living/phrases/all-done"))
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Prolog
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	(:include
		(kb
			<begin-escape-syntax>
				notEqual(A,B) :- A \== B.
				coordinates(bedroom,-5.05,-0.18).
				coordinates(livingroom,-1.94,0.36).
				coordinates(kitchen,1.2,-0.26).
			<end-escape-syntax>
		)
	)
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; ICs
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	(:conditional
		(trashcan-full ?H ?R ?L)
		(:condition 
			(:statement (?I (sensor-pressure-high ?R)))
			(:statement (?A (human-robot-cleaning ?H ?R ?L)))
			(:temporal (overlaps ?A ?I [1 inf]))
		)
		(:resolver
			(:goal
				(?G (object-state trash-can full) false)
			)
			(:statement
				(?S0 (object-state trash-can full) true)
				(?S (say trashcan-full))
			)
			(:temporal
				(release ?S [1 inf])
				(before ?S0 ?G [1 inf])
				(before ?A ?S0 [1 inf])
			)
			(:include (trashcan-full "./data/domains/assisted-living/phrases/trashcan-full"))
		)
	)	
	(:conditional
		(reminder-move ?I ?H ?L1 ?L2)
		(:condition 
			(:statement (?I (human-is-moving ?H ?L2)))
			(:temporal (greater-than (duration ?I) 10000) 	) 
		)
		(:resolver
			(:statement
				(?S (say (human-moving-reminder ?H ?L2)))
			)
			(:include ((human-moving-reminder ?H ?L2) "./data/domains/assisted-living/phrases/human-moving-reminder"))
		)
	)	
	(:conditional
		(reminder-put ?I ?H ?L1 ?L2)
		(:condition 
			(:statement (?I (human-put ?H ?O ?R ?L)))
			(:temporal (greater-than (duration ?I) 10000) 	) 
		)
		(:resolver
			(:statement
				(?S (say (human-put-reminder ?H ?O ?L)))
			)
			(:include ((human-put-reminder ?H ?O ?L) "./data/domains/assisted-living/phrases/human-put-reminder"))
		)
	)

	(:conditional
		(relaxing-while-cleaning ?H ?R ?L ?I1 ?IC )
		(:condition
			(:statement
				( ?I1 (sensor-switch tv) true )
				( ?IC (human-robot-cleaning ?H ?R ?L) )
			)
			(:temporal
				(during ?I1 ?IC [1 inf] [1 inf])
			)
		)
		(:resolver
			(:statement
				(?S (say (human-relaxing-while-cleaning ?H ?L)))
			)
			(:include ((human-relaxing-while-cleaning ?H ?L) "./data/domains/assisted-living/phrases/human-relaxing-while-cleaning"))
		)
	)

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; ROS
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	(:ros
;; 			(register-action
;; 				/move_base
;; 				MoveBaseAction 
;; 			)
;; 			(is-goal ;; any variable can become a goal that is send to ROS when a matching statement starts execution
;; 				(:ros-move-goal ?X ?Y)
;; 				/move_base	
;; 				MoveBaseAction
;; 				(MoveBaseGoal g (PoseStamped target_pose (Header header (String frame_id /map)) (Pose pose (Point position (float x ?X) (float y ?Y)) (Quaternion orientation (float w 1.0)))))
;; 			)

		(subscribe-to 
			(robot-is-moving) 	; Variable
			?B									; Value
			robot_is_moving			; ROS topic name
			(Bool b ?B) 				; ROS message
		)
		(subscribe-to 
			(at Hans) 						; Variable
			?L									; Value
			ros_slipper_location		; ROS topic name
			(String l ?L) 				; ROS message
		)
		(subscribe-to 
			(sensor-pressure-high r1) 	; Variable
			?B											; Value
			pressure_sensor_robot_high			; ROS topic name
			(Bool b ?B) 						; ROS message
		)
		(subscribe-to 
			(sensor-pressure-switch r1) 		; Variable
			?S														; Value
			pressure_sensor_robot_state				; ROS topic name
			(Bool b1 ?S)   								; ROS message
		)
		(subscribe-to 
			(sensor-switch couch)		 	; Variable
			?S												; Value
			pressure_sensor_couch_state								; ROS topic name
			(Bool b2 ?S) 							; ROS message
		)
		(subscribe-to 
			(sensor-switch tv)		 			; Variable
			?S												; Value
			tv_sensor_state									; ROS topic name
			(Bool b3 ?S) 							; ROS message
		)
		(subscribe-to 
			(sensor-switch remote-done-button)		 			; Variable
			?S												; Value
			done_sensor									; ROS topic name
			(Bool b4 ?S) 							; ROS message
		)
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Operators
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(:operator 
	(move-robot ?R ?L1 ?L2)
	(:preconditions
		(?P (at ?R) ?L1)
	)
	(:effects
		(?E (at ?R) ?L2)
		(?S (say (robot-moving ?R ?L1 ?L2)))
		(?RI (busy ?R) 1)
 		(?G (:ros-move-goal ?X ?Y))
		(?GD (robot-is-moving))
	)
	(:constraints
		(:prolog kb
			(location ?L1)
			(location ?L2)
			(notEqual ?L1 ?L2)
 			(coordinates ?L2 ?X ?Y)
		)
		(:temporal 
			(before ?P ?THIS [1 inf])
			(before ?THIS ?E [1 inf])
			(before ?P ?G [1 inf])
			(before ?G ?E [1 inf])
 			(during ?G ?THIS [1 inf] [1 inf])
			(during ?S ?THIS [1 inf] [1 inf])
			(equals ?RI ?THIS)
			(equals ?GD ?G)
		)
		(:include ((robot-moving ?R ?L1 ?L2) "./data/domains/assisted-living/phrases/robot-moving"))
	)
)

(:operator 
	(move-human ?H ?L1 ?L2)
	(:preconditions
		(?P (at ?H) ?L1)
	)
	(:effects
		(?E (at ?H) ?L2)
		(?S1 (say (human-moving ?H ?L2)))
		(?S2 (say thanks))
		(?RI (busy ?H) 1)
		(?HM (human-is-moving ?H ?L2))
	)
	(:constraints
		(:prolog kb
			(location ?L1)
			(location ?L2)
			(notEqual ?L1 ?L2)
		)
		(:temporal 
			(overlaps ?P ?THIS [1 inf])
			(overlaps ?THIS ?E [1 inf])
			(during ?S1 ?THIS [1 inf] [1 inf])
			(during ?S2 ?E [1 inf] [1 inf])
			(equals ?RI ?THIS)
			(starts ?HM ?THIS [1 inf])
			(meets ?HM ?E)
		)
		(:include ((human-moving ?H ?L2) "./data/domains/assisted-living/phrases/human-moving"))
	)
)

(:operator 
	(move-human-robot ?H ?R ?L1 ?L2)
	(:preconditions
		(?P1 (at ?H) ?L1)
		(?P2 (at ?R) ?L1)
	)
	(:effects
		(?E1 (at ?H) ?L2)
		(?E2 (at ?R) ?L2)
		(?S1 (say (human-robot-moving ?H ?L2)))
		(?S2 (say thanks))
		(?RI (busy ?R) 1)
		(?RH (busy ?H) 1)
		(?G (:ros-move-goal ?X ?Y))
		(?GD (robot-is-moving))
		(?HM (human-is-moving ?H ?L2))
	)
	(:constraints
		(:prolog kb
			(location ?L1)
			(location ?L2)
			(notEqual ?L1 ?L2)
			(coordinates ?L2 ?X ?Y)
		)
		(:temporal 
			(overlaps ?P1 ?THIS [1 inf])
			(overlaps ?THIS ?E1 [1 inf])
			(before ?P2 ?G [1 inf])
			(before ?G ?E2 [1 inf])
			(during ?G ?THIS [1 inf] [1 inf])
			(during ?S1 ?THIS [1 inf] [1 inf])
			(during ?S2 ?E1 [1 inf] [1 inf])
			(equals ?RI ?THIS)
			(equals ?RH ?THIS)
			(equals ?GD ?G)
			(starts ?HM ?THIS [1 inf])
			(meets ?HM ?E1)
		)
		(:include ((human-robot-moving ?H ?L2) "./data/domains/assisted-living/phrases/human-robot-moving"))
	)
)

(:operator 
	(human-robot-cleaning ?H ?R ?L)
	(:preconditions
		(?P1 (object-location trash-can) ?R)
		(?P2 (at ?R) ?L)
		(?P3 (at ?H) ?L)
		(?P4 (state ?L tidy) false)
	)
	(:effects
		(?E (state ?L tidy) true)
		(?EDone (sensor-switch remote-done-button) true)
		(?S1 (say (clean ?H ?L)))
		(?S2 (say (thanks-for-cleaning ?H)))
		(?RI (busy ?R) 1)
		(?RH (busy ?H) 1)
	)
	(:constraints
		(:temporal 
			(before ?THIS ?E [1 1])
			(overlaps ?P4 ?THIS [1 inf])
			(during ?EDone ?THIS [1 inf] [1 inf])
			(during ?THIS ?P1 [1 inf] [1 inf])
			(during ?THIS ?P2 [1 inf] [1 inf])
			(during ?THIS ?P3 [1 inf] [1 inf])
			(during ?S1 ?THIS [1 inf] [1 inf])
			(after ?S2 ?EDone [1 inf])
			(equals ?RI ?THIS)
			(equals ?RH ?THIS)
		)
		(:include ((clean ?H ?L) "./data/domains/assisted-living/phrases/clean"))
		(:include ((thanks-for-cleaning ?H) "./data/domains/assisted-living/phrases/thanks-for-cleaning"))
	)
)

(:operator 
	(human-robot-empty-trash ?H ?R)
	(:preconditions
		(?P1 (at ?R) kitchen)
		(?P2 (at ?H) kitchen)
		(?P3 (object-state trash-can full) true)
	)
	(:effects
		(?E1 (sensor-pressure-high ?R) false)
		(?E2 (object-state trash-can full) false)
		(?E3 (sensor-pressure-switch ?R) true)
		(?E4 (sensor-pressure-switch ?R) false)
		(?S1 (say (empty-trashcan ?H)))
		(?S2 (say thanks))
		(?RI (busy ?R) 1)
	)
	(:constraints
		(:temporal 
			(during ?THIS ?P1 [1 inf] [1 inf])
			(during ?THIS ?P2 [1 inf] [1 inf])
			(during ?E4 ?THIS [1 inf] [1 inf])
			(overlaps ?THIS ?E3 [1 inf])
			(overlaps ?E1 ?E3 [1 inf])
			(before ?P3 ?THIS [1 inf])
			(before ?E4 ?E3 [1 inf])
			(overlaps ?E1 ?E2 [1 inf])
			(overlaps ?THIS ?E2 [1 inf])
			(overlaps ?THIS ?E1 [1 inf])
			(during ?S1 ?THIS [1 inf] [1 inf])
			(during ?S2 ?E2 [1 inf] [1 inf])
			(equals ?RI ?THIS)
		)
		(:include ((empty-trashcan ?H) "./data/domains/assisted-living/phrases/empty-trashcan"))
	)
)

(:operator 
	(human-put ?H ?O ?R ?L)
	(:preconditions
		(?P1 (object-location ?O) ?L)
		(?P2 (at ?R) ?L)
		(?P3 (at ?H) ?L)
	)
	(:effects
		(?E1 (object-location ?O) ?R)
		(?E3 (sensor-pressure-switch ?R) true)
 		(?S1 (say (ask-for-object ?H ?O)))
		(?S2 (say thanks))
		(?RI (busy ?R) 1)
		(?RH (busy ?H) 1)
	)
	(:constraints
		(:temporal 
			(overlaps ?P1 ?THIS [1 inf])
			(during ?S1 ?THIS [1 inf] [1 inf])
			(during ?S2 ?E3 [1 inf] [1 inf])
			(during ?THIS ?P2 [1 inf] [1 inf])
			(during ?THIS ?P3 [1 inf] [1 inf])
			(overlaps ?THIS ?E3 [1 inf])
			(overlaps ?E3 ?E1 [1 inf])
			(equals ?RI ?THIS)
			(equals ?RH ?THIS)	
		)
		(:include ((ask-for-object ?H ?O) "./data/domains/assisted-living/phrases/ask-for-object"))
	)
)

(:operator 
	(human-take ?H ?O ?R ?L)
	(:preconditions
		(?P1 (object-location ?O) ?R)
		(?P2 (at ?R) ?L)
		(?P3 (at ?H) ?L)
	)
	(:effects
		(?E1 (object-location ?O) ?L)
		(?E3 (sensor-pressure-switch ?R) false)
 		(?S1 (say (ask-to-take-object ?H ?O ?L)))
		(?S2 (say thanks))
		(?RI (busy ?R) 1)
	)
	(:constraints
		(:temporal 
			(overlaps ?P1 ?THIS [1 inf])
			(during ?S1 ?THIS [1 inf] [1 inf])
			(during ?S2 ?E3 [1 inf] [1 inf])
			(during ?THIS ?P2 [1 inf] [1 inf])
			(during ?THIS ?P3 [1 inf] [1 inf])
			(overlaps ?THIS ?E3 [1 inf])
			(overlaps ?E3 ?E1 [1 inf])
			(equals ?RI ?THIS)
		)
		(:include ((ask-to-take-object ?H ?O ?L) "./data/domains/assisted-living/phrases/ask-to-take-object"))
	)
)

		
