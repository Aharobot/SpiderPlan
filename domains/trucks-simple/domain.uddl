;; Very simple domain for transporting objects between locations

(initial-context
	(domain
		( enum truck )
		( enum location )
		( enum cargo )
		( enum object )
		( enum cargo-location ( list truck location ) )
		( sig ( at truck ) location )
		( sig ( cargo-at cargo ) cargo-location )
		( sig ( holds truck ) cargo )
		( sig ( free location ) boolean )
		( sig ( adjacent location location ) boolean )
		( sig ( Move truck location location ) )
		( sig ( Pick truck cargo location ) )
		( sig ( Put truck cargo location ) )
		( sig ( notEqual location location ) boolean )
	)
	(include
		( kb
			<begin-escape-syntax>
notEqual(A,B) :- A \== B.
			<end-escape-syntax>
		)
	)
)

(operator
	( Move ?A ?L1 ?L2 )
	(preconditions
		( ?P1 ( at ?A ) ?L1 )
		( ?P2 ( free ?L2 ) true )
		( ?P3 ( free ?L1 ) false )
	)
	(effects
		( ?E1 ( at ?A ) ?L2 )
		( ?E2 ( free ?L1 ) true )
		( ?E3 ( free ?L2 ) false )
	)
	(constraints
		(temporal
			( duration ?THIS [10 inf] )
			( meets ?P1 ?THIS )
			( meets ?P1 ?E2 )
			( meets ?P2 ?E1 )
			( equals ?E1 ?E3 )
			( meets ?THIS ?E1 )
			( meets ?THIS ?E3 )
			( meets ?P3 ?THIS )
		)
		(prolog kb
			(location ?L1)
			(location ?L2)
			(notEqual ?L1 ?L2)
		)
		(cost
			(add euros 100)
		)
	)
)
(operator
	( Pick ?A ?T ?L )
	(preconditions
		( ?P1 ( at ?A ) ?L )
		( ?P2 ( cargo-at ?T ) ?L )
		( ?P3 ( holds ?A ) nothing )
	)
	(effects
		( ?E1 ( holds ?A ) ?T )
		( ?E2 ( cargo-at ?T ) ?A )
	)
	(constraints
		(temporal
			( duration ?THIS [5 5] )
			( during ?THIS ?P1 [1 inf] [1 inf] )
			( meets ?P2 ?THIS )
			( meets ?P3 ?THIS )
			( meets ?THIS ?E1 )
			( meets ?THIS ?E2 )
		)
	)
)
(operator
	( Put ?A ?T ?L )
	(preconditions
		( ?P1 ( at ?A ) ?L )
		( ?P2 ( cargo-at ?T ) ?A )
		( ?P3 ( holds ?A ) ?T )
	)
	(effects
		( ?E1 ( holds ?A ) nothing )
		( ?E2 ( cargo-at ?T ) ?L )
	)
	(constraints
		(temporal
			( duration ?THIS [5 5] )
			( during ?THIS ?P1 [1 inf] [1 inf] )
			( meets ?P2 ?THIS )
			( meets ?P3 ?THIS )
			( meets ?THIS ?E1 )
			( meets ?THIS ?E2 )
		)
	)
)
